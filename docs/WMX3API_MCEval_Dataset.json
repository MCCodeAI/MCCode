[
    {
        "TaskId": 1,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(0).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(0)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 0. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(0, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(0).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 0 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(0)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(0, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(0)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Create a command value of target as 180.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 180\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to specified absolute position.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret!=0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(0, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 2,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(1).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(1)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 1. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(1, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(1).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 1 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(1)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(1, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(1)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(1)\n\n    # Create a command value of target as 200.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 1\n    posCommand.target = 200\n    posCommand.profile.velocity = 2000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to a specified distance relatively. e.g. 'Move 100..'\n    ret = Wmx3Lib_cm.motion.StartMov(posCommand)\n    if ret!=0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(1)\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(1, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 3,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(2).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(2)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 2. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(2, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(2).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 2 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(2)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(2, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(2)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(2)\n\n    jogCommand = Motion_JogCommand()\n    jogCommand.profile.type = ProfileType.Trapezoidal\n    jogCommand.axis = 2\n    jogCommand.profile.velocity = 160\n    jogCommand.profile.acc = 10000\n    jogCommand.profile.dec = 10000\n\n    # Rotate the motor at the specified speed.\n    ret =Wmx3Lib_cm.motion.StartJog(jogCommand)\n    if ret!=0:\n        print('StartJog error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    #Jogging for 3 seconds\n    sleep(3.5)\n    \n    Wmx3Lib_cm.motion.Stop(2)\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(2, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 4,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Create a command value of target as 180.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 180\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to specified absolute position.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret!=0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Create a command value of target as 200.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 200\n    posCommand.profile.velocity = 2000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to a specified distance relatively. e.g. 'Move 100..'\n    ret = Wmx3Lib_cm.motion.StartMov(posCommand)\n    if ret!=0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Set servo off for Axis 0\n\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 5,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    adv = AdvancedMotion(Wmx3Lib)\n    path = AdvMotion_PathIntplCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n\n    path.enableConstProfile = 1\n\n    path.profile = Profile()\n    path.profile.type = ProfileType.Trapezoidal\n    path.profile.velocity = 1000\n    path.profile.acc = 10000\n    path.profile.dec = 10000\n\n    path.numPoints = 4\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n\n    path.SetTarget(0, 0, -200)\n    path.SetTarget(1, 0, -200)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 1, -150)\n    path.SetTarget(1, 1, -200)\n    path.SetCenterPos(0, 1, 0)\n    path.SetCenterPos(1, 1, 0)\n    path.SetDirection(1, 1)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, -180)\n    path.SetTarget(1, 2, -10)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 3, -10)\n    path.SetTarget(1, 3, -150)\n    path.SetCenterPos(0, 3, 0)\n    path.SetCenterPos(1, 3, 0)\n    path.SetDirection(3, 1)\n\n    ret = adv.advMotion.StartPathIntplPos(path)\n    if ret!=0:\n            print('StartPathIntplPos error code is ' + str(ret) + ': ' + adv.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0)\n\n\n    # Set servo off for Axis 0 and 1\n\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    }
]