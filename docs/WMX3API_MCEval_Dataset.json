[
    {
        "TaskId": 1,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(0).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(0)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 0. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(0, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(0).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 0 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(0)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(0, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(0)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Create a command value of target as 180.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 180\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to specified absolute position.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret!=0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(0, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 2,
        "Instruction": "Start a relative position command of Axis 1 with 200 distance and 2000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(1).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(1)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 1. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(1, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(1).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 1 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(1)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(1, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(1)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(1)\n\n    # Create a command value of target as 200.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 1\n    posCommand.target = 200\n    posCommand.profile.velocity = 2000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to a specified distance relatively. e.g. 'Move 100..'\n    ret = Wmx3Lib_cm.motion.StartMov(posCommand)\n    if ret!=0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(1)\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(1, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[1],\n[200]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 3,
        "Instruction": "Jog Axis 2 for 3.5s with 160 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(2).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(2)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 2. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(2, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(2).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 2 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(2)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(2, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(2)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(2)\n\n    jogCommand = Motion_JogCommand()\n    jogCommand.profile.type = ProfileType.Trapezoidal\n    jogCommand.axis = 2\n    jogCommand.profile.velocity = 160\n    jogCommand.profile.acc = 10000\n    jogCommand.profile.dec = 10000\n\n    # Rotate the motor at the specified speed.\n    ret =Wmx3Lib_cm.motion.StartJog(jogCommand)\n    if ret!=0:\n        print('StartJog error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    #Jogging for 3 seconds\n    sleep(3.5)\n    \n    Wmx3Lib_cm.motion.Stop(2)\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(2, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[2],\n[396]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 4,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity, and then start a relative position command of Axis 0 with 200 distance and 2000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Create a command value of target as 180.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 180\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to specified absolute position.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret!=0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Create a command value of target as 200.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 200\n    posCommand.profile.velocity = 2000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to a specified distance relatively. e.g. 'Move 100..'\n    ret = Wmx3Lib_cm.motion.StartMov(posCommand)\n    if ret!=0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Set servo off for Axis 0\n\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[380]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 5,
        "Instruction": "Start an absolute position path interpolation motion command of Axis 0 and 1 with velocity 1000. The 1st segment is a linear interpolation to position (-200, -200), the 2nd segment is a counterclockwise circular interpolation to position (-150, -200) with center point (0, 0), the 3rd segment is a linear interpolation to position (-180, -10), and the 4th segment is a clockwise circular interpolation to position (-10, -150) with center point (0, 0).",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    adv = AdvancedMotion(Wmx3Lib)\n    path = AdvMotion_PathIntplCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n\n    path.enableConstProfile = 1\n\n    path.profile = Profile()\n    path.profile.type = ProfileType.Trapezoidal\n    path.profile.velocity = 1000\n    path.profile.acc = 10000\n    path.profile.dec = 10000\n\n    path.numPoints = 4\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n\n    path.SetTarget(0, 0, -200)\n    path.SetTarget(1, 0, -200)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 1, -150)\n    path.SetTarget(1, 1, -200)\n    path.SetCenterPos(0, 1, 0)\n    path.SetCenterPos(1, 1, 0)\n    path.SetDirection(1, 1)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, -180)\n    path.SetTarget(1, 2, -10)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 3, -10)\n    path.SetTarget(1, 3, -150)\n    path.SetCenterPos(0, 3, 0)\n    path.SetCenterPos(1, 3, 0)\n    path.SetDirection(3, 1)\n\n    ret = adv.advMotion.StartPathIntplPos(path)\n    if ret!=0:\n            print('StartPathIntplPos error code is ' + str(ret) + ': ' + adv.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0)\n\n\n    # Set servo off for Axis 0 and 1\n\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[-10,-150]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 6,
        "Instruction": "Set output bit 0.2 to be 1, sleep for 0.15 seconds, then set it to be 0.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set output bit 0.2 to be 1, sleep for 0.15 seconds, and then set it to be 0.\n    Wmx3Lib_Io = Io(Wmx3Lib)\n    ret = Wmx3Lib_Io.SetOutBit(0x0, 0x02, 0x01)\n    if ret!=0:\n        print('SetOutBit error code is ' + str(ret) + ': ' + Wmx3Lib_Io.ErrorToString(ret))\n        return\n    \n    sleep(0.15)\n    ret = Wmx3Lib_Io.SetOutBit(0x0, 0x02, 0x00)\n    if ret!=0:\n        print('SetOutBit error code is ' + str(ret) + ': ' + Wmx3Lib_Io.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": NaN,
        "MotionLogData": NaN
    },
    {
        "TaskId": 7,
        "Instruction": "Start a absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    # Create a command value of target as (300, 100).\n    lin = Motion_LinearIntplCommand()\n    lin.axisCount = 2 \n    lin.SetAxis(0,0)\n    lin.SetAxis(1,1) \n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0,300)  #Set target of Axis 0 to be 300\n    lin.SetTarget(1,100)  #Set target of Axis 1 to be 100\n\n    # Start an absolute position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret!=0:\n            print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n    \n\n    # Set servo off for Axis 0 and 1\n\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[300,100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 8,
        "Instruction": "Start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    # Create a command value of relative distance of (200, -150).\n    lin = Motion_LinearIntplCommand()\n    lin.axisCount = 2 \n    lin.SetAxis(0,0)\n    lin.SetAxis(1,1) \n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0,200)  #Set target of Axis 0 to be 300\n    lin.SetTarget(1,-150)  #Set target of Axis 1 to be 100\n\n    # Start an relative position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplMov(lin)\n    if ret!=0:\n            print('StartLinearIntplMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n    \n\n    # Set servo off for Axis 0 and 1\n\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[200,150]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 9,
        "Instruction": "Start a absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity, and then start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    # Create a command value of relative distance of (200, -150).\n    lin = Motion_LinearIntplCommand()\n    lin.axisCount = 2 \n    lin.SetAxis(0,0)\n    lin.SetAxis(1,1) \n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0,300)  #Set target of Axis 0 to be 300\n    lin.SetTarget(1,100)  #Set target of Axis 1 to be 100\n\n    # Start an absolute position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret!=0:\n            print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n\n    lin.SetTarget(0,200)  #Set target of Axis 0 to be 300\n    lin.SetTarget(1,-150)  #Set target of Axis 1 to be 100\n\n    # Start an relative position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplMov(lin)\n    if ret!=0:\n            print('StartLinearIntplMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n    \n\n    # Set servo off for Axis 0 and 1\n\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[500,-50]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 10,
        "Instruction": "Establish synchronous control between master axis 0 and a slave axis 1, then move Axis 0 to position 188 with velocity 1200.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    \n    # Establish the synchronization between Axis 0 and Axis 1, with Axis 0 designated as the master axis and Axis 1 as the slave axis.\n    ret = Wmx3Lib_cm.sync.SetSyncMasterSlave(0, 1)\n    if ret != 0:\n        print('SetSyncMasterSlave error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Create a command with target position 1,000,000 and velocity 100,000.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 188\n    posCommand.profile.velocity = 1200\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute the command to move the master axis from its current position to a specified absolute position, with the slave axis moving in synchronization.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret != 0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Wait for the positioning motion to complete. Start a blocking wait command, returning only when Axis 0 becomes idle.\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Release the synchronization between Axis 0 and Axis 1.\n    ret = Wmx3Lib_cm.sync.ResolveSync(1)\n    if ret != 0:\n        print('ResolveSync error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    \n\n    # Set servo off for Axis 0 and 1\n\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[188,188]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 11,
        "Instruction": "Start a cubic spline motion command of Axis 2 and 3 with the total time of 1000ms to complete, the 1st point to 9th point are (0,0),(10,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(7,8).",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Clear alarms, set servos on, and perform homing for Axis 2, 3\n    for axis in [2, 3]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    \n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    # Allocate buffer memory for a spline execution channel with 100 points for Channel 0.\n    ret = Wmx3Lib_adv.advMotion.CreateSplineBuffer(0, 100)\n    if ret != 0:\n        print('CreateSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n    # Set the spline command options, specifying Axis 0 and Axis 1, with a total time of 1,000 milliseconds to complete the spline motion.\n    splineCommand = AdvMotion_TotalTimeSplineCommand()\n    splineCommand.dimensionCount = 2\n    splineCommand.SetAxis(0, 2)\n    splineCommand.SetAxis(1, 3)\n    splineCommand.totalTimeMilliseconds = 1000\n\n    # Set the spline point data with 9 points.\n    splinePoint = []\n\n    ret, CmStatus = Wmx3Lib_cm.GetStatus()\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[0].SetPos(0, 0)\n    splinePoint[0].SetPos(1, 0)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[1].SetPos(0, 10)\n    splinePoint[1].SetPos(1, 0)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[2].SetPos(0, 50)\n    splinePoint[2].SetPos(1, 50)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[3].SetPos(0, 100)\n    splinePoint[3].SetPos(1, 100)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[4].SetPos(0, 100)\n    splinePoint[4].SetPos(1, 150)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[5].SetPos(0, 0)\n    splinePoint[5].SetPos(1, 150)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[6].SetPos(0, 0)\n    splinePoint[6].SetPos(1, 100)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[7].SetPos(0, 50)\n    splinePoint[7].SetPos(1, 50)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[8].SetPos(0, 7)\n    splinePoint[8].SetPos(1, 8)\n\n    # Execute the spline command.\n    ret = Wmx3Lib_adv.advMotion.StartCSplinePos_TotalTime(0, splineCommand, 9, splinePoint)\n    if ret != 0:\n        print('StartCSplinePos_TotalTime error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n    # Wait for the spline motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 2)\n    axisSel.SetAxis(1, 3)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Free buffer memory for the spline execution channel. (Normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n    if ret != 0:\n        print('FreeSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n\n\n    # Set servo off for Axis 2 and 3\n\n    for axis in [2, 3]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[2,3],\n[7,8]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 12,
        "Instruction": "Create and execute a cyclic buffer memory space for an axis 4, to pisition 100 within 200 cycles, then to pisition 10 within 600 cycles, then to pisition -100 within 200 cycles, then sleep 1.5s, and close the cyclic buffer.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Clear alarms, set servos on, and perform homing for Axis 4\n    for axis in [4]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    \n    Wmx3Lib_cyc = CyclicBuffer(Wmx3Lib)\n\n    # Create a new cyclic buffer memory space for Axis 4, with a size of 1,024 cycles.\n    ret = Wmx3Lib_cyc.OpenCyclicBuffer(4, 1024)\n    if ret != 0:\n        print('OpenCyclicBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n\n    # Start the execution of the cyclic position command buffer for Axis 4.\n    ret = Wmx3Lib_cyc.Execute(4)\n    if ret != 0:\n        print('Execute error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n\n    # Dynamically add points to move from the current position to the absolute position of 100 within 200 cycles.\n    cyclicBufferSingleAxisCommand = CyclicBufferSingleAxisCommand()\n    cyclicBufferSingleAxisCommand.type = CyclicBufferCommandType.AbsolutePos\n    cyclicBufferSingleAxisCommand.intervalCycles = 200\n    cyclicBufferSingleAxisCommand.command = 100\n    ret = Wmx3Lib_cyc.AddCommand(4, cyclicBufferSingleAxisCommand)\n    if ret != 0:\n        print('AddCommand error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n\n    # The relative position is 0, which means there was no movement for 600 cycles from the previous position.\n    cyclicBufferSingleAxisCommand.type = CyclicBufferCommandType.RelativePos\n    cyclicBufferSingleAxisCommand.intervalCycles = 600\n    cyclicBufferSingleAxisCommand.command = 0\n    ret = Wmx3Lib_cyc.AddCommand(4, cyclicBufferSingleAxisCommand)\n    if ret != 0:\n        print('AddCommand error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n\n    # Move from the current position to the absolute position of -100 within 200 cycles.\n    cyclicBufferSingleAxisCommand.type = CyclicBufferCommandType.AbsolutePos\n    cyclicBufferSingleAxisCommand.intervalCycles = 200\n    cyclicBufferSingleAxisCommand.command = -100\n    ret = Wmx3Lib_cyc.AddCommand(4, cyclicBufferSingleAxisCommand)\n    if ret != 0:\n        print('AddCommand error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n\n    # Wait for 1.5 seconds until the motion ends.\n    sleep(1.5)\n\n    # Close the cyclic buffer memory space.\n    ret = Wmx3Lib_cyc.CloseCyclicBuffer(4)\n    if ret != 0:\n        print('CloseCyclicBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n\n\n    # Set servo off for Axis 4\n    for axis in [4]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[4],\n[-100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 13,
        "Instruction": "Start the motion for a path interpolation with look ahead channel 0 for Axis 0 and 1, the 1st to 4th points are (100, 0) with smoothRadius as 12.5, (100, 100) with smoothRadius as 25,(0, 100) with smoothRadius as 50, and(0, 0).",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Clear alarms, set servos on, and perform homing for Axis 0 and 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        # Wmx3Lib_cm.motion.Wait(axis)\n\n    \n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n\n    sleep(0.1)\n\n    # Allocate buffer memory for a path interpolation with look ahead channel with 1,000 points for Channel 0.\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n    # Set the configuration for the path interpolation with lookahead channel, specifying Axis 0 and Axis 1, with composite velocity of 1,000, composite acceleration of 20,000, and sample distance of 100.\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 20000\n    conf.sampleDistance = 100\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n    # Add interpolation commands to the path interpolation with look ahead channel, with the main body being a square trajectory formed by four points, with a side length of 100. There are smooth radii of 12.5, 25, and 50 at the end of the first, second, and third segments, respectively.\n    path = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 12.5\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 25\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 50\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n    # Start the motion for the path interpolation with look ahead channel.\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Free buffer memory for a path interpolation with lookahead channel. \n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n\n  \n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 14,
        "Instruction": "Start a clockwise circular interpolation motion command of Axis 0 and 1 with center position (100, 200), arc length 360, and velocity 1000.",
        "CanonicalCode": "#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Clear alarms, set servos on, and perform homing for Axis 0 and 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    \n    circularIntplCommand = Motion_CenterAndLengthCircularIntplCommand()\n\n    # Execute Circular Interpolation of Axis 0 and 1 with center position (100, 200), arc length 360, velocity 1000.\n    circularIntplCommand.SetAxis(0, 0)\n    circularIntplCommand.SetAxis(1, 1)\n    circularIntplCommand.SetCenterPos(0, 100)\n    circularIntplCommand.SetCenterPos(1, 200)\n    circularIntplCommand.clockwise = 1\n    circularIntplCommand.arcLengthDegree = 360\n    circularIntplCommand.profile.type = ProfileType.Trapezoidal\n    circularIntplCommand.profile.velocity = 1000\n    circularIntplCommand.profile.acc = 10000\n    circularIntplCommand.profile.dec = 10000\n    ret = Wmx3Lib_cm.motion.StartCircularIntplPos_CenterAndLength(circularIntplCommand)\n    if ret != 0:\n        print('StartCircularIntplPos_RadiusAndEnd error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    }
]