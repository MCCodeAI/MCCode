[
    {
        "No": 1,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "ApiBuffer Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 2,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "ApiBuffer Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 3,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "ApiBuffer Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 4,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 5,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "ApiBuffer Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 6,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 7,
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel, unsigned int size)",
        "FunctionPython": "def CreateApiBuffer(channel, size)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Create a memory space for use with the API buffer. This function must be called before the API buffer functions can be used."
    },
    {
        "No": 8,
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel)",
        "FunctionPython": "def CreateApiBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Create a memory space for use with the API buffer using the default memory size."
    },
    {
        "No": 9,
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel, unsigned int size, SizeUnit::T sizeUnit)",
        "FunctionPython": "def CreateApiBuffer(channel, size, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Create a memory space for use with the API buffer. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 10,
        "FunctionC++": "WMX3APIFUNC FreeApiBuffer(unsigned int channel)",
        "FunctionPython": "def FreeApiBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Close an API buffer memory space"
    },
    {
        "No": 11,
        "FunctionC++": "WMX3APIFUNC StartRecordBufferChannel(unsigned int channel)",
        "FunctionPython": "def StartRecordBufferChannel(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": " Start recording APIs to the API buffer channel.  "
    },
    {
        "No": 12,
        "FunctionC++": "WMX3APIFUNC EndRecordBufferChannel()",
        "FunctionPython": "def EndRecordBufferChannel()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "End recording APIs to the API buffer channel."
    },
    {
        "No": 13,
        "FunctionC++": "WMX3APIFUNC GetRecordingBufferChannel(int *channel, unsigned char *enable)",
        "FunctionPython": "def GetRecordingBufferChannel()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the currently recording API buffer channel, if any"
    },
    {
        "No": 14,
        "FunctionC++": "WMX3APIFUNC Execute(unsigned int channel)",
        "FunctionPython": "def Execute(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Execute an API buffer. "
    },
    {
        "No": 15,
        "FunctionC++": "WMX3APIFUNC Halt(unsigned int channel)",
        "FunctionPython": "def Halt(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Halt an API buffer."
    },
    {
        "No": 16,
        "FunctionC++": "WMX3APIFUNC Clear(unsigned int channel)",
        "FunctionPython": "def Clear(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Clear an API buffer."
    },
    {
        "No": 17,
        "FunctionC++": "WMX3APIFUNC Rewind(unsigned int channel)",
        "FunctionPython": "def Rewind(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Rewind an API buffer."
    },
    {
        "No": 18,
        "FunctionC++": "WMX3APIFUNC GetStatus(unsigned int channel, ApiBufferStatus *pStatus)",
        "FunctionPython": "def GetStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the current status of an API buffer. "
    },
    {
        "No": 19,
        "FunctionC++": "WMX3APIFUNC SetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "FunctionPython": "def SetOptions(channel, pOptions)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Set options for an API buffer."
    },
    {
        "No": 20,
        "FunctionC++": "WMX3APIFUNC GetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "FunctionPython": "def GetOptions(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the currently applied options for an API buffer."
    },
    {
        "No": 21,
        "FunctionC++": "WMX3APIFUNC SetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "FunctionPython": "def SetWatch(channel, pWatch)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Set watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
    },
    {
        "No": 22,
        "FunctionC++": "WMX3APIFUNC GetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "FunctionPython": "def GetWatch(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
    },
    {
        "No": 23,
        "FunctionC++": "WMX3APIFUNC Sleep(unsigned int milliseconds)",
        "FunctionPython": "def Sleep(milliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a sleep command to an API buffer."
    },
    {
        "No": 24,
        "FunctionC++": "WMX3APIFUNC Wait(int axis)",
        "FunctionPython": "def Wait(int axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a wait command to an API buffer. "
    },
    {
        "No": 25,
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Wait_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a wait command to an API buffer."
    },
    {
        "No": 26,
        "FunctionC++": "WMX3APIFUNC Wait(ApiBufferCondition *condition)",
        "FunctionPython": "def Wait_ApiBufferCondition(condition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a wait command to an API buffer."
    },
    {
        "No": 27,
        "FunctionC++": "WMX3APIFUNC FlowIf(ApiBufferCondition *condition, ApiBufferCondition *wait=NULL)",
        "FunctionPython": "def FlowIf(condition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"If\" command to an API buffer."
    },
    {
        "No": 28,
        "FunctionC++": "WMX3APIFUNC FlowElseIf(ApiBufferCondition *condition)",
        "FunctionPython": "def FlowElseIf(condition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"Else If\" command to an API buffer."
    },
    {
        "No": 29,
        "FunctionC++": "WMX3APIFUNC FlowElse()",
        "FunctionPython": "def FlowElse()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"Else\" command to an API buffer. "
    },
    {
        "No": 30,
        "FunctionC++": "WMX3APIFUNC FlowEndIf()",
        "FunctionPython": "def FlowEndIf()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"End If\" command to an API buffer."
    },
    {
        "No": 31,
        "FunctionC++": "int GetOutputModuleId()",
        "FunctionPython": "def GetOutputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "ApiBuffer Class",
        "Instruction": null
    },
    {
        "No": 32,
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)",
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": null
    },
    {
        "No": 33,
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": null
    },
    {
        "No": 34,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "Compensation Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 35,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Compensation Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 36,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "Compensation Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 37,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Compensation Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 38,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 39,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "Compensation Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 40,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 41,
        "FunctionC++": "WMX3APIFUNC SetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData)",
        "FunctionPython": "def SetPitchErrorCompensation(axis, pitchErrCompData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Set pitch error compensation parameters. "
    },
    {
        "No": 42,
        "FunctionC++": "WMX3APIFUNC SetPitchErrorCompensation(int axis, PitchErrorCompensationFreePositionData *pitchErrCompData)",
        "FunctionPython": "def SetPitchErrorCompensation_FreePosition(axis, pitchErrCompData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Set free position mode pitch error compensation parameters."
    },
    {
        "No": 43,
        "FunctionC++": "WMX3APIFUNC GetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData)",
        "FunctionPython": "def GetPitchErrorCompensation(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Get pitch error compensation parameters. "
    },
    {
        "No": 44,
        "FunctionC++": "WMX3APIFUNC GetPitchErrorCompensation(int axis, PitchErrorCompensationFreePositionData *pitchErrCompData)",
        "FunctionPython": "def GetPitchErrorCompensation_FreePosition(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Get free position mode pitch error compensation parameters."
    },
    {
        "No": 45,
        "FunctionC++": "WMX3APIFUNC EnablePitchErrorCompensation(int axis)",
        "FunctionPython": "def EnablePitchErrorCompensation(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Enable pitch error compensation."
    },
    {
        "No": 46,
        "FunctionC++": "WMX3APIFUNC DisablePitchErrorCompensation(int axis)",
        "FunctionPython": "def DisablePitchErrorCompensation(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Disable pitch error compensation."
    },
    {
        "No": 47,
        "FunctionC++": "WMX3APIFUNC GetPitchErrorCompensationAtPosition(int axis, double pos, double *pCompensation)",
        "FunctionPython": "def GetPitchErrorCompensationAtPosition(axis, pos)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Obtain the pitch error compensation amount at the specified position."
    },
    {
        "No": 48,
        "FunctionC++": "WMX3APIFUNC Set2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationData *pitchErrCompData2D)",
        "FunctionPython": "def Set2DPitchErrorCompensation(channel, pitchErrCompData2D)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Set two-dimensional (2D) pitch error compensation parameters."
    },
    {
        "No": 49,
        "FunctionC++": "WMX3APIFUNC Set2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D)",
        "FunctionPython": "def Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Set free position two-dimensional (2D) pitch error compensation parameters. "
    },
    {
        "No": 50,
        "FunctionC++": "WMX3APIFUNC Get2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationData *pitchErrCompData2D)",
        "FunctionPython": "def Get2DPitchErrorCompensation(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Get two-dimensional (2D) pitch error compensation parameters."
    },
    {
        "No": 51,
        "FunctionC++": "WMX3APIFUNC Get2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D)",
        "FunctionPython": "def Get2DPitchErrorCompensation_FreePosition(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Get free position two-dimensional (2D) pitch error compensation parameters. "
    },
    {
        "No": 52,
        "FunctionC++": "WMX3APIFUNC Enable2DPitchErrorCompensation(unsigned int channel)",
        "FunctionPython": "def Enable2DPitchErrorCompensation(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Enable two-dimensional (2D) pitch error compensation."
    },
    {
        "No": 53,
        "FunctionC++": "WMX3APIFUNC Disable2DPitchErrorCompensation(unsigned int channel)",
        "FunctionPython": "def Disable2DPitchErrorCompensation(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Disable two-dimensional (2D) pitch error compensation."
    },
    {
        "No": 54,
        "FunctionC++": "WMX3APIFUNC Get2DPitchErrorCompensationAtPosition(unsigned int channel, double refPos1, double refPos2, double *pCompensation)",
        "FunctionPython": "def Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Obtain the two-dimensional (2D) pitch error compensation amount at the specified position."
    },
    {
        "No": 55,
        "FunctionC++": "WMX3APIFUNC SetBacklashCompensation(int axis, BacklashCompensationData *pBacklashCompData)",
        "FunctionPython": "def SetBacklashCompensation(axis, pBacklashCompData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Set backlash compensation parameters. "
    },
    {
        "No": 56,
        "FunctionC++": "WMX3APIFUNC GetBacklashCompensation(int axis, BacklashCompensationData *pBacklashCompData)",
        "FunctionPython": "def GetBacklashCompensation(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class",
        "Instruction": "Get backlash compensation parameters."
    },
    {
        "No": 57,
        "FunctionC++": "WMX3APIFUNC EnableBacklashCompensation(int axis)",
        "FunctionPython": "def EnableBacklashCompensation(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Enable backlash compensation."
    },
    {
        "No": 58,
        "FunctionC++": "WMX3APIFUNC DisableBacklashCompensation(int axis)",
        "FunctionPython": "def DisableBacklashCompensation(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Compensation Class",
        "Instruction": "Disable backlash compensation."
    },
    {
        "No": 59,
        "FunctionC++": "int GetInputModuleId()",
        "FunctionPython": "def GetInputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 60,
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize, char *initialState)",
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize, initialState)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 61,
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 62,
        "FunctionC++": "int GetOutputModuleId()=0",
        "FunctionPython": "def GetOutputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 63,
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)=0",
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 64,
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)=0",
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 65,
        "FunctionC++": "int GetModuleId()",
        "FunctionPython": "def GetModuleId()",
        "ReturnType": "unsigned int",
        "ReturnValue": "ID of the module",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 66,
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize)",
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 67,
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 68,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "CoreMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 69,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 70,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "CoreMotion Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 71,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 72,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 73,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 74,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 75,
        "FunctionC++": "WMX3APIFUNC GetStatus(CoreMotionStatus *status)",
        "FunctionPython": "def GetStatus()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Read the current system status from the engine."
    },
    {
        "No": 76,
        "FunctionC++": "WMX3APIFUNC ExecEStop(EStopLevel::T level)",
        "FunctionPython": "def ExecEStop(level)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Initiate an emergency stop to stop the motion of all axes."
    },
    {
        "No": 77,
        "FunctionC++": "WMX3APIFUNC ReleaseEStop()",
        "FunctionPython": "def ReleaseEStop()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the emergency stop state to allow the axes to be controlled again."
    },
    {
        "No": 78,
        "FunctionC++": "WMX3APIFUNC TriggerFlightRecorder()",
        "FunctionPython": "def TriggerFlightRecorder()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Trigger the flight recorder to write the flight recorder data to file."
    },
    {
        "No": 79,
        "FunctionC++": "WMX3APIFUNC ResetFlightRecorder()",
        "FunctionPython": "def ResetFlightRecorder()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Reset the flight recorder so that it may be triggered again."
    },
    {
        "No": 80,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 81,
        "FunctionC++": "WMX3APIFUNC StartPos(PosCommand *pPosCommand)",
        "FunctionPython": "def StartPos(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position command. "
    },
    {
        "No": 82,
        "FunctionC++": "WMX3APIFUNC StartMov(PosCommand *pPosCommand)",
        "FunctionPython": "def StartMov(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position command."
    },
    {
        "No": 83,
        "FunctionC++": "WMX3APIFUNC StartPos(TriggerPosCommand *pPosCommand)",
        "FunctionPython": "def StartPos_Trigger(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command."
    },
    {
        "No": 84,
        "FunctionC++": "WMX3APIFUNC StartMov(TriggerPosCommand *pPosCommand)",
        "FunctionPython": "def StartMov_Trigger(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command."
    },
    {
        "No": 85,
        "FunctionC++": "WMX3APIFUNC StartPos(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPos_TriggerEvents(pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command with multiple trigger events. "
    },
    {
        "No": 86,
        "FunctionC++": "WMX3APIFUNC StartMov(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartMov_TriggerEvents(pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command with multiple trigger events. "
    },
    {
        "No": 87,
        "FunctionC++": "WMX3APIFUNC StartPos(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def StartPos(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute position commands for multiple axes. "
    },
    {
        "No": 88,
        "FunctionC++": "WMX3APIFUNC StartMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def StartMov(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative position commands for multiple axes."
    },
    {
        "No": 89,
        "FunctionC++": "WMX3APIFUNC StartPos(unsigned int numCommands, TriggerPosCommand *pPosCommand)",
        "FunctionPython": "def StartPos_Trigger(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes."
    },
    {
        "No": 90,
        "FunctionC++": "WMX3APIFUNC StartMov(unsigned int numCommands, TriggerPosCommand *pPosCommand)",
        "FunctionPython": "def StartMov_Trigger(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes."
    },
    {
        "No": 91,
        "FunctionC++": "WMX3APIFUNC StartPos(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands with multiple trigger events for multiple axes."
    },
    {
        "No": 92,
        "FunctionC++": "WMX3APIFUNC StartMov(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands with multiple trigger events for multiple axes. "
    },
    {
        "No": 93,
        "FunctionC++": "WMX3APIFUNC StartLinearIntplPos(LinearIntplCommand *pLinearIntplCommand)",
        "FunctionPython": "def StartLinearIntplPos(pLinearIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position linear interpolation motion command."
    },
    {
        "No": 94,
        "FunctionC++": "WMX3APIFUNC StartLinearIntplMov(LinearIntplCommand *pLinearIntplCommand)",
        "FunctionPython": "def StartLinearIntplMov(pLinearIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position linear interpolation motion command. "
    },
    {
        "No": 95,
        "FunctionC++": "WMX3APIFUNC StartLinearIntplPos(LinearIntplCommand *pLinearIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position triggered linear interpolation motion command."
    },
    {
        "No": 96,
        "FunctionC++": "WMX3APIFUNC StartLinearIntplMov(LinearIntplCommand *pLinearIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position triggered linear interpolation motion command."
    },
    {
        "No": 97,
        "FunctionC++": "WMX3APIFUNC StartLinearIntplPos(LinearIntplCommand *pLinearIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position triggered linear interpolation motion command with multiple trigger events."
    },
    {
        "No": 98,
        "FunctionC++": "WMX3APIFUNC StartLinearIntplMov(LinearIntplCommand *pLinearIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartLinearIntplMov_TriggerEvents(pLinearIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position triggered linear interpolation motion command with multiple trigger events."
    },
    {
        "No": 99,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndLengthCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length. "
    },
    {
        "No": 100,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndLengthCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplMov_CenterAndLength(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length."
    },
    {
        "No": 101,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc. "
    },
    {
        "No": 102,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the relative center and end positions of the arc. "
    },
    {
        "No": 103,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 104,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 105,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(LengthAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc."
    },
    {
        "No": 106,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(LengthAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc."
    },
    {
        "No": 107,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(RadiusAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplPos_RadiusAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc. "
    },
    {
        "No": 108,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(RadiusAndEndCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplMov_RadiusAndEnd(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc. "
    },
    {
        "No": 109,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc."
    },
    {
        "No": 110,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand)",
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd3D(pCircularIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 111,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplPos_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length."
    },
    {
        "No": 112,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplMov_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length. "
    },
    {
        "No": 113,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc."
    },
    {
        "No": 114,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplMov_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the relative center and end positions of the arc."
    },
    {
        "No": 115,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc."
    },
    {
        "No": 116,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 117,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(LengthAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc. "
    },
    {
        "No": 118,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(LengthAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplMov_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc."
    },
    {
        "No": 119,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplPos_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc."
    },
    {
        "No": 120,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the relative end position of the arc."
    },
    {
        "No": 121,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 122,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 123,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplPos_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center position of the arc and the arc length."
    },
    {
        "No": 124,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplMov_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center position of the arc and the arc length. "
    },
    {
        "No": 125,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplPos_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center and end positions of the arc."
    },
    {
        "No": 126,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center and end positions of the arc."
    },
    {
        "No": 127,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 128,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc."
    },
    {
        "No": 129,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(LengthAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the absolute end position of the arc."
    },
    {
        "No": 130,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(LengthAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the relative end position of the arc."
    },
    {
        "No": 131,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplPos_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the absolute end position of the arc. "
    },
    {
        "No": 132,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplMov_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the relative end position of the arc."
    },
    {
        "No": 133,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 134,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 135,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplPos(HelicalIntplCommand *pHelicalIntplCommand)",
        "FunctionPython": "def StartHelicalIntplPos(pHelicalIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis."
    },
    {
        "No": 136,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplMov(HelicalIntplCommand *pHelicalIntplCommand)",
        "FunctionPython": "def StartHelicalIntplMov(pHelicalIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis. "
    },
    {
        "No": 137,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplPos(HelicalIntplCommand *pHelicalIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartHelicalIntplPos_Trigger(pHelicalIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis. "
    },
    {
        "No": 138,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplMov(HelicalIntplCommand *pHelicalIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis. "
    },
    {
        "No": 139,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplPos(HelicalIntplCommand *pHelicalIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis."
    },
    {
        "No": 140,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplMov(HelicalIntplCommand *pHelicalIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis. "
    },
    {
        "No": 141,
        "FunctionC++": "WMX3APIFUNC StartVelToPos(TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartVelToPos(pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a velocity command."
    },
    {
        "No": 142,
        "FunctionC++": "WMX3APIFUNC StartVelToMov(TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartVelToMov(pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a velocity command."
    },
    {
        "No": 143,
        "FunctionC++": "WMX3APIFUNC StartVelToPos(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartVelToPos(numCommands, pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing velocity commands. "
    },
    {
        "No": 144,
        "FunctionC++": "WMX3APIFUNC StartVelToMov(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartVelToMov(numCommands, pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing velocity commands."
    },
    {
        "No": 145,
        "FunctionC++": "WMX3APIFUNC StartVelToPos(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartVelToPos_TriggerEvents(pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 146,
        "FunctionC++": "WMX3APIFUNC StartVelToMov(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 147,
        "FunctionC++": "WMX3APIFUNC StartVelToPos(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 148,
        "FunctionC++": "WMX3APIFUNC StartVelToMov(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 149,
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartTrqToPos(pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a torque command. "
    },
    {
        "No": 150,
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartTrqToMov(pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a torque command."
    },
    {
        "No": 151,
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartTrqToPos(numCommands, pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing torque commands. "
    },
    {
        "No": 152,
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "FunctionPython": "def StartTrqToMov(numCommands, pTriggerPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing torque commands."
    },
    {
        "No": 153,
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 154,
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 155,
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 156,
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartTrqToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 157,
        "FunctionC++": "WMX3APIFUNC StartJog(JogCommand *pJogCommand)",
        "FunctionPython": "def StartJog(pJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a jog command."
    },
    {
        "No": 158,
        "FunctionC++": "WMX3APIFUNC StartJog(TimedJogCommand *pTimedJogCommand)",
        "FunctionPython": "def StartJog_TimedJog(pTimedJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a timed jog command."
    },
    {
        "No": 159,
        "FunctionC++": "WMX3APIFUNC StartJog(unsigned int numCommands, JogCommand *pJogCommand)",
        "FunctionPython": "def StartJog(numCommands, pJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start jog commands for multiple axes. "
    },
    {
        "No": 160,
        "FunctionC++": "WMX3APIFUNC StartJog(unsigned int numCommands, TimedJogCommand *pTimedJogCommand)",
        "FunctionPython": "def StartJog_TimedJog(numCommands, pTimedJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start timed jog commands for multiple axes."
    },
    {
        "No": 161,
        "FunctionC++": "WMX3APIFUNC StartPosToJog(TriggerJogCommand *pTriggerJogCommand)",
        "FunctionPython": "def StartPosToJog_Trigger(pTriggerJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command."
    },
    {
        "No": 162,
        "FunctionC++": "WMX3APIFUNC StartPosToJog(unsigned int numCommands, TriggerJogCommand *pTriggerJogCommand)",
        "FunctionPython": "def StartPosToJog_Trigger(numCommands, pTriggerJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 163,
        "FunctionC++": "WMX3APIFUNC StartPosToJog(JogCommand *pJogCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPosToJog_TriggerEvents(pJogCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered jog commands for multiple axes that are currently executing position commands."
    },
    {
        "No": 164,
        "FunctionC++": "WMX3APIFUNC StartPosToJog(unsigned int numCommands, JogCommand *pJogCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPosToJog_TriggerEvents(numCommands, pJogCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 165,
        "FunctionC++": "WMX3APIFUNC StartPosToJog(PosToJogCommand *pPosToJogCommand)",
        "FunctionPython": "def StartPosToJog_PosToJog(pPosToJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied. "
    },
    {
        "No": 166,
        "FunctionC++": "WMX3APIFUNC StartPosToJog(unsigned int numCommands, PosToJogCommand *pPosToJogCommand)",
        "FunctionPython": "def StartPosToJog_PosToJog(numCommands, pPosToJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied."
    },
    {
        "No": 167,
        "FunctionC++": "WMX3APIFUNC StartMovToJog(PosToJogCommand *pPosToJogCommand)",
        "FunctionPython": "def StartMovToJog(pPosToJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied. "
    },
    {
        "No": 168,
        "FunctionC++": "WMX3APIFUNC StartMovToJog(unsigned int numCommands, PosToJogCommand *pPosToJogCommand)",
        "FunctionPython": "def StartMovToJog(numCommands, pPosToJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied."
    },
    {
        "No": 169,
        "FunctionC++": "WMX3APIFUNC Stop(int axis)",
        "FunctionPython": "def Stop(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis."
    },
    {
        "No": 170,
        "FunctionC++": "WMX3APIFUNC Stop(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Stop_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes."
    },
    {
        "No": 171,
        "FunctionC++": "WMX3APIFUNC Stop(int axis, double dec)",
        "FunctionPython": "def Stop_Dec(axis, dec)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis using the specified deceleration and a trapezoidal profile."
    },
    {
        "No": 172,
        "FunctionC++": "WMX3APIFUNC Stop(unsigned int numCommands, StopCommand *pStopCommand)",
        "FunctionPython": "def Stop_StopCommand(numCommands, pStopCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes using the specified decelerations and trapezoidal profiles."
    },
    {
        "No": 173,
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(int axis)",
        "FunctionPython": "def ExecQuickStop(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration."
    },
    {
        "No": 174,
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(AxisSelection *pAxisSelection)",
        "FunctionPython": "def ExecQuickStop_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration."
    },
    {
        "No": 175,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(int axis, double timeMilliseconds)",
        "FunctionPython": "def ExecTimedStop_TimeMilli(axis, timeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile. "
    },
    {
        "No": 176,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(AxisSelection *pAxisSelection, double timeMilliseconds)",
        "FunctionPython": "def ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile"
    },
    {
        "No": 177,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(unsigned int numCommands, TimeCommand *pTimeCommand)",
        "FunctionPython": "def ExecTimedStop_TimeCmd(numCommands, pTimeCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile."
    },
    {
        "No": 178,
        "FunctionC++": "WMX3APIFUNC Wait(int axis)",
        "FunctionPython": "def Wait(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer. "
    },
    {
        "No": 179,
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Wait_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer."
    },
    {
        "No": 180,
        "FunctionC++": "WMX3APIFUNC Wait(WaitCondition *pWaitCondition)",
        "FunctionPython": "def Wait_WaitCondition(pWaitCondition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the specified wait condition becomes true. "
    },
    {
        "No": 181,
        "FunctionC++": "WMX3APIFUNC Wait(int axis, unsigned int waitTimeMilliseconds)",
        "FunctionPython": "def Wait_TimeMilli(axis, waitTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the axis becomes idle or the wait time elapses. "
    },
    {
        "No": 182,
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection, unsigned int waitTimeMilliseconds)",
        "FunctionPython": "def Wait_AxisSel_TimeMilli(pAxisSelection, waitTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the axes become idle."
    },
    {
        "No": 183,
        "FunctionC++": "WMX3APIFUNC Wait(WaitCondition *pWaitCondition, unsigned int waitTimeMilliseconds)",
        "FunctionPython": "def Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the specified wait condition becomes true. "
    },
    {
        "No": 184,
        "FunctionC++": "WMX3APIFUNC Pause(int axis)",
        "FunctionPython": "def Pause(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Pause the execution of a position command or interpolation command. "
    },
    {
        "No": 185,
        "FunctionC++": "WMX3APIFUNC Pause(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Pause_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Pause the execution of a position command or interpolation command for multiple axes. "
    },
    {
        "No": 186,
        "FunctionC++": "WMX3APIFUNC Resume(int axis)",
        "FunctionPython": "def Resume(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command."
    },
    {
        "No": 187,
        "FunctionC++": "WMX3APIFUNC Resume(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Resume_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command for multiple axes."
    },
    {
        "No": 188,
        "FunctionC++": "WMX3APIFUNC OverridePos(PosCommand *pPosCommand)",
        "FunctionPython": "def OverridePos(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target position of an axis currently executing a position command. The target position is specified as an absolute position"
    },
    {
        "No": 189,
        "FunctionC++": "WMX3APIFUNC OverrideMov(PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideMov(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target position of an axis currently executing a position command. The target position is specified as a relative position."
    },
    {
        "No": 190,
        "FunctionC++": "WMX3APIFUNC OverrideVel(PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideVel(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the velocity of an axis currently executing a position, jog, or velocity command. "
    },
    {
        "No": 191,
        "FunctionC++": "WMX3APIFUNC OverrideAcc(PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideAcc(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the acceleration of an axis currently executing a position, jog, or velocity command"
    },
    {
        "No": 192,
        "FunctionC++": "WMX3APIFUNC OverrideDec(PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideDec(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the deceleration of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 193,
        "FunctionC++": "WMX3APIFUNC OverrideJerkAcc(PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideJerkAcc(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the acceleration jerk of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 194,
        "FunctionC++": "WMX3APIFUNC OverrideJerkDec(PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideJerkDec(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the deceleration jerk of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 195,
        "FunctionC++": "WMX3APIFUNC OverrideProfile(PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideProfile(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the entire profile of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 196,
        "FunctionC++": "WMX3APIFUNC OverridePos(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverridePos(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target positions of multiple axes currently executing position commands. The target positions are specified as absolute positions."
    },
    {
        "No": 197,
        "FunctionC++": "WMX3APIFUNC OverrideMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideMov(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target positions of multiple axes currently executing position commands. The target positions are specified as relative positions."
    },
    {
        "No": 198,
        "FunctionC++": "WMX3APIFUNC OverrideVel(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideVel(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the velocities of multiple axes currently executing position, jog, or velocity commands. "
    },
    {
        "No": 199,
        "FunctionC++": "WMX3APIFUNC OverrideAcc(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideAcc(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the accelerations of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 200,
        "FunctionC++": "WMX3APIFUNC OverrideDec(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideDec(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the decelerations of multiple axes currently executing position, jog, or velocity commands. "
    },
    {
        "No": 201,
        "FunctionC++": "WMX3APIFUNC OverrideJerkAcc(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideJerkAcc(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the acceleration jerks of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 202,
        "FunctionC++": "WMX3APIFUNC OverrideJerkDec(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideJerkDec(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the deceleration jerks of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 203,
        "FunctionC++": "WMX3APIFUNC OverrideProfile(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def OverrideProfile(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Override the entire profiles of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 204,
        "FunctionC++": "WMX3APIFUNC StopJogAtPos(PosCommand *pPosCommand)",
        "FunctionPython": "def StopJogAtPos(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop an axis executing a jog command at a timing that will cause the axis to stop at exactly the specified position."
    },
    {
        "No": 205,
        "FunctionC++": "WMX3APIFUNC StopJogAtPos(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def StopJogAtPos(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes executing jog commands at timing that wil cause the axes to stop at exactly the specified positions. "
    },
    {
        "No": 206,
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(PosCommand *pPosCommand)",
        "FunctionPython": "def SuperimposeMov(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position superimposed motion command. The superimposed motion command will execute on top of any other motion that the axis may already be executing. "
    },
    {
        "No": 207,
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def SuperimposeMov(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start superimposed relative position commands for multiple axes. The superimposed motion commands will execute on top of any other motion that the axes may already be executing. "
    },
    {
        "No": 208,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(int axis)",
        "FunctionPython": "def StopSuperimpose(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a superimposed motion."
    },
    {
        "No": 209,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StopSuperimpose_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the superimposed motion of multiple axes."
    },
    {
        "No": 210,
        "FunctionC++": "WMX3APIFUNC SimulatePos(SimulatePosCommand *pSimulatePosCommand, double *pPeakVelocity, double *pTotalTimeMilliseconds, double *pAccelerationTimeMilliseconds, double *pCruiseTimeMilliseconds, double *pDecelerationTimeMilliseconds)",
        "FunctionPython": "def SimulatePos(pSimulatePosCommand)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a position command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the position command are returned."
    },
    {
        "No": 211,
        "FunctionC++": "WMX3APIFUNC SimulateLinearIntplPos(SimulateLinearIntplCommand *pSimulateLinearIntplCommand, double *pPeakVelocity, double *pTotalTimeMilliseconds, double *pAccelerationTimeMilliseconds,double *pCruiseTimeMilliseconds, double *pDecelerationTimeMilliseconds)",
        "FunctionPython": "def SimulateLinearIntplPos(pSimulateLinearIntplCommand)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the linear interpolation motion command are returned. "
    },
    {
        "No": 212,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePosCommand *pSimulatePosCommand, int returnType, double timeMilliseconds, double *pCalculatedPos, double *pCalculatedVel)",
        "FunctionPython": "def SimulatePosAtTime(pSimulatePosCommand, int returnType, double timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a position command without moving any axes. The position and velocity of the axis after the motion command runs for the specified time are returned. "
    },
    {
        "No": 213,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulateLinearIntplCommand *pSimulateLinearIntplCommand, double timeMilliseconds, double *pPosArray, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "FunctionPython": "def SimulatePosAtTime_LinearIntpl(pSimulateLinearIntplCommand, timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The move distance, remain distance, and total distance after the linear interpolation runs for a specified amount of time are returned."
    },
    {
        "No": 214,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePosCommand *pSimulatePosCommand, double specificPos, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtPos(pSimulatePosCommand, specificPos)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a position command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned. "
    },
    {
        "No": 215,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulateLinearIntplCommand *pSimulateLinearIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The move time, remain time, and total time after the linear interpolation runs for a specified distance are returned. "
    },
    {
        "No": 216,
        "FunctionC++": "WMX3APIFUNC CreatePVTBuffer(int axis, unsigned int points)",
        "FunctionPython": "def CreatePVTBuffer(axis, points)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Allocate buffer memory to an axis for the execution of PVT motion commands. "
    },
    {
        "No": 217,
        "FunctionC++": "WMX3APIFUNC FreePVTBuffer(int axis)",
        "FunctionPython": "def FreePVTBuffer(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Free PVT buffer memory for an axis. "
    },
    {
        "No": 218,
        "FunctionC++": "WMX3APIFUNC GetPVTBufferPoints(int axis, unsigned int *pPoints)",
        "FunctionPython": "def GetPVTBufferPoints(axis, pPoints)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the amount of PVT buffer memory currently allocated to an axis."
    },
    {
        "No": 219,
        "FunctionC++": "WMX3APIFUNC GetPVTBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "def GetPVTBytesPerPoint(pBytes)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the number of bytes required per point data in the PVT buffer memory."
    },
    {
        "No": 220,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT(AdvMotion_PVTCommand pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 221,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT_Intpl(pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
    },
    {
        "No": 222,
        "FunctionC++": "WMX3APIFUNC StartPT(PTCommand *pPTCommand)",
        "FunctionPython": "def StartPT(pPTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PT motion command. "
    },
    {
        "No": 223,
        "FunctionC++": "WMX3APIFUNC StartVT(VTCommand *pVTCommand)",
        "FunctionPython": "def StartVT(pVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a VT motion command. "
    },
    {
        "No": 224,
        "FunctionC++": "WMX3APIFUNC StartAT(ATCommand *pATCommand)",
        "FunctionPython": "def StartAT(pATCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a AT motion command. "
    },
    {
        "No": 225,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTAdditionalCommand *pPVTAddlCommand=NULL)",
        "FunctionPython": "StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 226,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTIntplAdditionalCommand *pPVTAddlCommand=NULL)",
        "FunctionPython": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
    },
    {
        "No": 227,
        "FunctionC++": "WMX3APIFUNC StartPT(PTCommand *pPTCommand, unsigned int numAddlCommands=0, PTAdditionalCommand *pPTAddlCommand=NULL)",
        "FunctionPython": "StartPT(pPTCommand, numAddlCommands, pPTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PT motion command. "
    },
    {
        "No": 228,
        "FunctionC++": "WMX3APIFUNC StartVT(VTCommand *pVTCommand, unsigned int numAddlCommands=0, VTAdditionalCommand *pVTAddlCommand=NULL)",
        "FunctionPython": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a VT motion command."
    },
    {
        "No": 229,
        "FunctionC++": "WMX3APIFUNC StartAT(ATCommand *pATCommand, unsigned int numAddlCommands=0, ATAdditionalCommand *pATAddlCommand=NULL)",
        "FunctionPython": "StartAT(pATCommand, numAddlCommands, pATAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a AT motion command. "
    },
    {
        "No": 230,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 231,
        "FunctionC++": "WMX3APIFUNC StartHome(int axis)",
        "FunctionPython": "def StartHome(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start homing an axis. The axis will search for the home position. If found, the home position will become the zero position for that axis."
    },
    {
        "No": 232,
        "FunctionC++": "WMX3APIFUNC StartHome(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StartHome_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start homing multiple axes. The axes will search for the home positions. If found, the home position will become the zero position for that axis"
    },
    {
        "No": 233,
        "FunctionC++": "WMX3APIFUNC Continue(int axis)",
        "FunctionPython": "def Continue(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Continue homing an axis that has been paused during the homing operation. "
    },
    {
        "No": 234,
        "FunctionC++": "WMX3APIFUNC Continue(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Continue_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Continue homing multiple axes that have been paused during the homing operation. "
    },
    {
        "No": 235,
        "FunctionC++": "WMX3APIFUNC Cancel(int axis)",
        "FunctionPython": "def Cancel(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Cancel the homing operation for an axis that has been paused during homing operation."
    },
    {
        "No": 236,
        "FunctionC++": "WMX3APIFUNC Cancel(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Cancel_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Cancel the homing procedure for multiple axes that have been paused during homing operation"
    },
    {
        "No": 237,
        "FunctionC++": "WMX3APIFUNC SetCommandPos(int axis, double position)",
        "FunctionPython": "def SetCommandPos(axis, position)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the current command position of the axis to the specified value. "
    },
    {
        "No": 238,
        "FunctionC++": "WMX3APIFUNC SetFeedbackPos(int axis, double position)",
        "FunctionPython": "def SetFeedbackPos(axis, position)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the current feedback position of the axis to the specified value. "
    },
    {
        "No": 239,
        "FunctionC++": "WMX3APIFUNC SetHomeDone(int axis, unsigned char value)",
        "FunctionPython": "def SetHomeDone(axis, value)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the \"home done\" state. "
    },
    {
        "No": 240,
        "FunctionC++": "WMX3APIFUNC SetCommandPosToFeedbackPos(int axis, double posChangePerCycle=0)",
        "FunctionPython": "def SetCommandPosToFeedbackPos(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the current cyclic command position equal to the feedback position."
    },
    {
        "No": 241,
        "FunctionC++": "WMX3APIFUNC GetHomeData(HomeData *pHomeData)",
        "FunctionPython": "def GetHomeData()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the homing related data for all axes. "
    },
    {
        "No": 242,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 243,
        "FunctionC++": "WMX3APIFUNC SetSyncMasterSlave(int masterAxis, int slaveAxis, SyncOptions *pSyncOptions=NULL)",
        "FunctionPython": "def SetSyncMasterSlave(masterAxis, slaveAxis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Establish synchronous control between a master axis and a slave axis."
    },
    {
        "No": 244,
        "FunctionC++": "WMX3APIFUNC SetSyncCombine(int masterAxis1, int masterAxis2, int slaveAxis, SyncCombineOptions *pSyncCombineOptions=NULL)",
        "FunctionPython": "def SetSyncCombine(masterAxis1, masterAxis2, slaveAxis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Combine the position commands of two master axes and set it as the position command of a slave axis."
    },
    {
        "No": 245,
        "FunctionC++": "WMX3APIFUNC SetAbsoluteSyncPhase(int slaveAxis, double phase, Profile *pProfile)",
        "FunctionPython": "def SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the absolute sync phase of a slave axis."
    },
    {
        "No": 246,
        "FunctionC++": "WMX3APIFUNC AddRelativeSyncPhase(int slaveAxis, double phase, Profile *pProfile)",
        "FunctionPython": "def AddRelativeSyncPhase(slaveAxis, phase, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add a relative sync phase to a slave axis. "
    },
    {
        "No": 247,
        "FunctionC++": "WMX3APIFUNC SetSyncGearRatio(int slaveAxis, double gearRatio, Profile *pProfile)",
        "FunctionPython": "def SetSyncGearRatio(slaveAxis, gearRatio, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the sync gear ratio between a sync slave axis and the master axis. "
    },
    {
        "No": 248,
        "FunctionC++": "WMX3APIFUNC SetSyncGearRatio(int masterAxis, int slaveAxis, double gearRatio, Profile *pProfile)",
        "FunctionPython": "def SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Establish sync control between two axes, and set the sync gear ratio between a sync slave axis and the master axis."
    },
    {
        "No": 249,
        "FunctionC++": "WMX3APIFUNC SyncToJog(int slaveAxis, Profile *pProfile)",
        "FunctionPython": "def SyncToJog(slaveAxis, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis. "
    },
    {
        "No": 250,
        "FunctionC++": "WMX3APIFUNC SyncToJog(int slaveAxis)",
        "FunctionPython": "def SyncToJog(slaveAxis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis with the velocity equal to the velocity that the slave axis was moving at"
    },
    {
        "No": 251,
        "FunctionC++": "WMX3APIFUNC ResolveSync(int slaveAxis)",
        "FunctionPython": "def ResolveSync(slaveAxis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Release the specified slave axis from synchronous control."
    },
    {
        "No": 252,
        "FunctionC++": "WMX3APIFUNC SetSyncGroup(int groupId, SyncGroup syncGroup)",
        "FunctionPython": "def SetSyncGroup(groupId, pSyncGroup)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the axes and parameters of a synchronization group."
    },
    {
        "No": 253,
        "FunctionC++": "WMX3APIFUNC GetSyncGroup(int groupId, SyncGroup *pSyncGroup)",
        "FunctionPython": "def GetSyncGroup(groupId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the axes and parameters of a sync group. "
    },
    {
        "No": 254,
        "FunctionC++": "WMX3APIFUNC AddAxisToSyncGroup(int groupId, int axis, unsigned char isMaster)",
        "FunctionPython": "def AddAxisToSyncGroup(groupId, axis, isMaster)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add another axis to an existing sync group. "
    },
    {
        "No": 255,
        "FunctionC++": "WMX3APIFUNC RemoveAxisFromSyncGroup(int groupId, int axis)",
        "FunctionPython": "def RemoveAxisFromSyncGroup(groupId, axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Remove an axis from an existing sync group. "
    },
    {
        "No": 256,
        "FunctionC++": "WMX3APIFUNC EnableSyncGroup(int groupId, unsigned char enable)",
        "FunctionPython": "def EnableSyncGroup(groupId, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Enable or disable a sync group. "
    },
    {
        "No": 257,
        "FunctionC++": "WMX3APIFUNC GetSyncGroupStatus(int groupId, SyncGroupStatus *pStatus)",
        "FunctionPython": "def GetSyncGroupStatus(groupId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Read the current status of the specified sync group."
    },
    {
        "No": 258,
        "FunctionC++": "WMX3APIFUNC ClearSyncGroupError(int groupId)",
        "FunctionPython": "def ClearSyncGroupError(groupId)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear all sync group errors of the specified sync group. "
    },
    {
        "No": 259,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 260,
        "FunctionC++": "WMX3APIFUNC SetServoOn(int axis, int newStatus)",
        "FunctionPython": "def SetServoOn(axis, newStatus)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Turn a servo drive in the servo network on or off. "
    },
    {
        "No": 261,
        "FunctionC++": "WMX3APIFUNC SetServoOn(AxisSelection *axisSel, int newStatus)",
        "FunctionPython": "def SetServoOn_AxisSel(axisSel, newStatus)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Turn multiple servo drives in the servo network on or off. "
    },
    {
        "No": 262,
        "FunctionC++": "WMX3APIFUNC ClearAmpAlarm(int axis)",
        "FunctionPython": "def ClearAmpAlarm(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the servo drive amp alarm on the specified axis. "
    },
    {
        "No": 263,
        "FunctionC++": "WMX3APIFUNC ClearAmpAlarm(AxisSelection *axisSel)",
        "FunctionPython": "def ClearAmpAlarm_AxisSel(axisSel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the servo drive amp alarms on multiple axes."
    },
    {
        "No": 264,
        "FunctionC++": "WMX3APIFUNC ClearAxisAlarm(int axis)",
        "FunctionPython": "def ClearAxisAlarm(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear any axis alarms on the specified axis."
    },
    {
        "No": 265,
        "FunctionC++": "WMX3APIFUNC ClearAxisAlarm(AxisSelection *pAxisSelection)",
        "FunctionPython": "def ClearAxisAlarm_AxisSel(axisSel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear any axis alarms on multiple axes. "
    },
    {
        "No": 266,
        "FunctionC++": "WMX3APIFUNC SetAxisCommandMode(int axis, AxisCommandMode::T mode)",
        "FunctionPython": "def SetAxisCommandMode(axis, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the command mode of the axis."
    },
    {
        "No": 267,
        "FunctionC++": "WMX3APIFUNC SetAxisCommandMode(AxisSelection *pAxisSelection, AxisCommandMode::T mode)",
        "FunctionPython": "def SetAxisCommandMode_AxisSel(axisSel, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the command mode of multiple axes. "
    },
    {
        "No": 268,
        "FunctionC++": "WMX3APIFUNC GetAxisCommandMode(int axis, AxisCommandMode::T *pMode)",
        "FunctionPython": "def GetAxisCommandMode(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the command mode of the axis. "
    },
    {
        "No": 269,
        "FunctionC++": "WMX3APIFUNC GetPosCommand(int axis, double *pPosition)",
        "FunctionPython": "def GetPosCommand(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle position command of the axis. "
    },
    {
        "No": 270,
        "FunctionC++": "WMX3APIFUNC GetPosFeedback(int axis, double *pPosition)",
        "FunctionPython": "def GetPosFeedback(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle position feedback of the axis."
    },
    {
        "No": 271,
        "FunctionC++": "WMX3APIFUNC GetVelCommand(int axis, double *pVelocity)",
        "FunctionPython": "def GetVelCommand(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle velocity command of the axis"
    },
    {
        "No": 272,
        "FunctionC++": "WMX3APIFUNC GetVelFeedback(int axis, double *pVelocity)",
        "FunctionPython": "def GetVelFeedback(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle velocity feedback of the axis"
    },
    {
        "No": 273,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 274,
        "FunctionC++": "WMX3APIFUNC StartVel(VelCommand *pVelCommand)",
        "FunctionPython": "def StartVel(pVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a velocity command."
    },
    {
        "No": 275,
        "FunctionC++": "WMX3APIFUNC StartVel(TimedVelCommand *pTimedVelCommand)",
        "FunctionPython": "def StartVel_TimedVel(pTimedVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a timed velocity command. "
    },
    {
        "No": 276,
        "FunctionC++": "WMX3APIFUNC StartVel(VelCommand *pVelCommand, double maxTrqLimit)",
        "FunctionPython": "def StartVel_MaxTrq(pVelCommand, maxTrqLimit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a velocity command and set the maximum torque limit."
    },
    {
        "No": 277,
        "FunctionC++": "WMX3APIFUNC StartVel(unsigned int numCommands, VelCommand *pVelCommand)",
        "FunctionPython": "def StartVel(numCommands, pVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start velocity commands for multiple axes. "
    },
    {
        "No": 278,
        "FunctionC++": "WMX3APIFUNC StartVel(unsigned int numCommands, TimedVelCommand *pTimedVelCommand)",
        "FunctionPython": "def StartVel_TimedVel(numCommands, pTimedVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start timed velocity commands for multiple axes"
    },
    {
        "No": 279,
        "FunctionC++": "WMX3APIFUNC Stop(int axis)",
        "FunctionPython": "def Stop(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis."
    },
    {
        "No": 280,
        "FunctionC++": "WMX3APIFUNC Stop(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Stop_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes."
    },
    {
        "No": 281,
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(int axis)",
        "FunctionPython": "def ExecQuickStop(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration."
    },
    {
        "No": 282,
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(AxisSelection *pAxisSelection)",
        "FunctionPython": "def ExecQuickStop_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration."
    },
    {
        "No": 283,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(int axis, double timeMilliseconds)",
        "FunctionPython": "def ExecTimedStop_TimeMilli(axis, timeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile. "
    },
    {
        "No": 284,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(AxisSelection *pAxisSelection, double timeMilliseconds)",
        "FunctionPython": "def ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile"
    },
    {
        "No": 285,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(unsigned int numCommands, TimeCommand *pTimeCommand)",
        "FunctionPython": "def ExecTimedStop_TimeCmd(numCommands, pTimeCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile."
    },
    {
        "No": 286,
        "FunctionC++": "WMX3APIFUNC SetMaxMotorSpeed(int axis, double speed)",
        "FunctionPython": "def SetMaxMotorSpeed(axis, speed)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum motor speed of an axis."
    },
    {
        "No": 287,
        "FunctionC++": "WMX3APIFUNC GetMaxMotorSpeed(int axis, double *pSpeed)",
        "FunctionPython": "def GetMaxMotorSpeed(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum motor speed of an axis."
    },
    {
        "No": 288,
        "FunctionC++": "WMX3APIFUNC OverrideVel(VelCommand *pVelCommand)",
        "FunctionPython": "def OverrideVel(pVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set an override velocity for a single axis that is currently executing a velocity command."
    },
    {
        "No": 289,
        "FunctionC++": "WMX3APIFUNC OverrideVel(unsigned int numCommands, VelCommand *pVelCommand)",
        "FunctionPython": "def OverrideVel(numCommands, pVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set override velocities for multiple axes that are currently executing velocity commands."
    },
    {
        "No": 290,
        "FunctionC++": "WMX3APIFUNC StartPosToVel(TriggerVelCommand *pTriggerVelCommand)",
        "FunctionPython": "def StartPosToVel_TriggerVel(pTriggerVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a position command."
    },
    {
        "No": 291,
        "FunctionC++": "WMX3APIFUNC StartPosToVel(unsigned int numCommands, TriggerVelCommand *pTriggerVelCommand)",
        "FunctionPython": "def StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing position commands."
    },
    {
        "No": 292,
        "FunctionC++": "WMX3APIFUNC StartPosToVel(VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 293,
        "FunctionC++": "WMX3APIFUNC StartPosToVel(unsigned int numCommands, VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPosToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events"
    },
    {
        "No": 294,
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(TriggerVelCommand *pTriggerVelCommand)",
        "FunctionPython": "def StartTrqToVel_TriggerVel(pTriggerVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 295,
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(unsigned int numCommands, TriggerVelCommand *pTriggerVelCommand)",
        "FunctionPython": "def StartTrqToVel_TriggerVel(numCommands, pTriggerVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 296,
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartTrqToVel_TriggerEvents(pVelCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 297,
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(unsigned int numCommands, VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 298,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 299,
        "FunctionC++": "WMX3APIFUNC SetMaxTrqLimit(int axis, double torque)",
        "FunctionPython": "def SetMaxTrqLimit(axis, torque)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum torque limit of an axis."
    },
    {
        "No": 300,
        "FunctionC++": "WMX3APIFUNC GetMaxTrqLimit(int axis, double *pTorque)",
        "FunctionPython": "def GetMaxTrqLimit(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum torque limit of an axis."
    },
    {
        "No": 301,
        "FunctionC++": "WMX3APIFUNC SetPositiveTrqLimit(int axis, double torque)",
        "FunctionPython": "def SetPositiveTrqLimit(axis, torque)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum torque limit in the positive direction of an axis."
    },
    {
        "No": 302,
        "FunctionC++": "WMX3APIFUNC GetPositiveTrqLimit(int axis, double *pTorque)",
        "FunctionPython": "def GetPositiveTrqLimit(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum torque limit in the positive direction of an axis."
    },
    {
        "No": 303,
        "FunctionC++": "WMX3APIFUNC SetNegativeTrqLimit(int axis, double torque)",
        "FunctionPython": "def SetNegativeTrqLimit(axis, torque)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum torque limit in the negative direction of an axis. "
    },
    {
        "No": 304,
        "FunctionC++": "WMX3APIFUNC GetNegativeTrqLimit(int axis, double *pTorque)",
        "FunctionPython": "def GetNegativeTrqLimit(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum torque limit in the negative direction of an axis. "
    },
    {
        "No": 305,
        "FunctionC++": "WMX3APIFUNC StartTrq(TrqCommand *pTrqCommand)",
        "FunctionPython": "def StartTrq(pTrqCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command."
    },
    {
        "No": 306,
        "FunctionC++": "WMX3APIFUNC StartTrq(unsigned int numCommands, TrqCommand *pTrqCommand)",
        "FunctionPython": "def StartTrq(numCommands, pTrqCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start torque commands for multiple axes. "
    },
    {
        "No": 307,
        "FunctionC++": "WMX3APIFUNC StartTrq(TrqCommand *pTrqCommand, double maxMotorSpeed)",
        "FunctionPython": "def StartTrq_MaxMotorSpeed(pTrqCommand, maxMotorSpeed)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command and set the maximum motor speed. "
    },
    {
        "No": 308,
        "FunctionC++": "WMX3APIFUNC StartRampTimeTrq(TrqCommand *pTrqCommand, unsigned int rampCycleTime)",
        "FunctionPython": "def StartRampTimeTrq(pTrqCommand, rampCycleTime)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command in which the torque is changed over time"
    },
    {
        "No": 309,
        "FunctionC++": "WMX3APIFUNC StartRampTimeTrq(TrqCommand *pTrqCommand, unsigned int rampCycleTime, double maxMotorSpeed)",
        "FunctionPython": "def StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command in which the torque is changed over time and set the maximum motor speed."
    },
    {
        "No": 310,
        "FunctionC++": "WMX3APIFUNC StartRampRateTrq(TrqCommand *pTrqCommand, double rampRate)",
        "FunctionPython": "def StartRampRateTrq(pTrqCommand, rampRate)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command in which the torque is changed at a specified rate. "
    },
    {
        "No": 311,
        "FunctionC++": "WMX3APIFUNC StartRampRateTrq(TrqCommand *pTrqCommand, double rampRate, double maxMotorSpeed)",
        "FunctionPython": "def StartRampRateTrq(pTrqCommand, rampRate, maxMotorSpeed)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command in which the torque is changed at a specified rate and set the maximum motor speed. "
    },
    {
        "No": 312,
        "FunctionC++": "WMX3APIFUNC StopTrq(int axis)",
        "FunctionPython": "def StopTrq(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a torque command. "
    },
    {
        "No": 313,
        "FunctionC++": "WMX3APIFUNC StopTrq(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StopTrq_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop torque commands for multiple axes. "
    },
    {
        "No": 314,
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(TriggerTrqCommand *pTriggerTrqCommand)",
        "FunctionPython": "def StartPosToTrq(pTriggerTrqCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a position command."
    },
    {
        "No": 315,
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(unsigned int numCommands, TriggerTrqCommand *pTriggerTrqCommand)",
        "FunctionPython": "def StartPosToTrq(numCommands, pTriggerTrqCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing position commands."
    },
    {
        "No": 316,
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPosToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 317,
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(unsigned int numCommands, TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPosToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 318,
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(TriggerTrqCommand *pTriggerTrqCommand)",
        "FunctionPython": "def StartVelToTrq(pTriggerTrqCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a velocity command."
    },
    {
        "No": 319,
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(unsigned int numCommands, TriggerTrqCommand *pTriggerTrqCommand)",
        "FunctionPython": "def StartVelToTrq(numCommands, pTriggerTrqCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing velocity commands."
    },
    {
        "No": 320,
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartVelToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 321,
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(unsigned int numCommands, TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 322,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 323,
        "FunctionC++": "WMX3APIFUNC SetParam(SystemParam *pParam, SystemParam *pParamError=NULL)",
        "FunctionPython": "def SetParam(pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set system parameter settings for all axes."
    },
    {
        "No": 324,
        "FunctionC++": "WMX3APIFUNC GetParam(SystemParam *pParam)",
        "FunctionPython": "def GetParam()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get system parameter settings for all axes."
    },
    {
        "No": 325,
        "FunctionC++": "WMX3APIFUNC SetParam(int axis, SystemParam *pParam, SystemParam *pParamError=NULL)",
        "FunctionPython": "def SetParam_Axis(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set system parameter settings for a single axis. "
    },
    {
        "No": 326,
        "FunctionC++": "WMX3APIFUNC GetParam(int axis, SystemParam *pParam)",
        "FunctionPython": "def GetParam_Axis(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get system parameter settings for a single axis."
    },
    {
        "No": 327,
        "FunctionC++": "WMX3APIFUNC SetAxisParam(AxisParam *pParam, AxisParam *pParamError=NULL)",
        "FunctionPython": "def SetAxisParam(pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set axis parameters for all axes. "
    },
    {
        "No": 328,
        "FunctionC++": "WMX3APIFUNC GetAxisParam(AxisParam *pParam)",
        "FunctionPython": "def GetAxisParam()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get axis parameters for all axes."
    },
    {
        "No": 329,
        "FunctionC++": "WMX3APIFUNC SetAxisParam(int axis, AxisParam *pParam, AxisParam *pParamError=NULL)",
        "FunctionPython": "def SetAxisParam_Axis(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set axis parameters for a single axis. "
    },
    {
        "No": 330,
        "FunctionC++": "WMX3APIFUNC GetAxisParam(int axis, AxisParam *pParam)",
        "FunctionPython": "def GetAxisParam_Axis(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get axis parameters for a single axis. "
    },
    {
        "No": 331,
        "FunctionC++": "WMX3APIFUNC SetGearRatio(int axis, double numerator, double denominator)",
        "FunctionPython": "def SetGearRatio(axis, numerator, denominator)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the gear ratio of the axis. "
    },
    {
        "No": 332,
        "FunctionC++": "WMX3APIFUNC SetSingleTurn(int axis, bool enable, unsigned int encoderCount)",
        "FunctionPython": "def SetSingleTurn(axis, enable. encoderCount)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the single turn mode and single turn encoder count of an axis."
    },
    {
        "No": 333,
        "FunctionC++": "WMX3APIFUNC SetMovingAverageProfileTime(int axis, double milliseconds)",
        "FunctionPython": "def SetMovingAverageProfileTime(axis, milliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the moving average profile time parameter for an axis."
    },
    {
        "No": 334,
        "FunctionC++": "WMX3APIFUNC SetAxisUnit(int axis, double unit)",
        "FunctionPython": "def SetAxisUnit(axis, unit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the axis unit parameter for an axis. "
    },
    {
        "No": 335,
        "FunctionC++": "WMX3APIFUNC SetVelocityFeedforwardGain(int axis, double gain)",
        "FunctionPython": "def SetVelocityFeedforwardGain(axis, gain)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the velocity feedforward gain parameter for an axis."
    },
    {
        "No": 336,
        "FunctionC++": "WMX3APIFUNC SetAxisPolarity(int axis, char polarity)",
        "FunctionPython": "def SetAxisPolarity(axis, polarity)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the axis polarity for an axis."
    },
    {
        "No": 337,
        "FunctionC++": "WMX3APIFUNC SetAbsoluteEncoderMode(int axis, bool enable)",
        "FunctionPython": "def SetAbsoluteEncoderMode(axis, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the absolute encoder mode for an axis. "
    },
    {
        "No": 338,
        "FunctionC++": "WMX3APIFUNC SetAbsoluteEncoderHomeOffset(int axis, double offset)",
        "FunctionPython": "def SetAbsoluteEncoderHomeOffset(axis, offset)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the absolute encoder home offset for an axis."
    },
    {
        "No": 339,
        "FunctionC++": "WMX3APIFUNC GetGearRatio(int axis, double *pNumerator, double *pDenominator)",
        "FunctionPython": "def GetGearRatio(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the gear ratio of the axis. "
    },
    {
        "No": 340,
        "FunctionC++": "WMX3APIFUNC GetSingleTurn(int axis, bool *pEnable, unsigned int *pEncoderCount)",
        "FunctionPython": "def GetSingleTurn(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the single turn mode and single turn encoder count of an axis. "
    },
    {
        "No": 341,
        "FunctionC++": "WMX3APIFUNC GetMovingAverageProfileTime(int axis, double *pMilliseconds)",
        "FunctionPython": "def GetMovingAverageProfileTime(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the moving average profile time parameter of an axis. "
    },
    {
        "No": 342,
        "FunctionC++": "WMX3APIFUNC GetAxisUnit(int axis, double *pUnit)",
        "FunctionPython": "def GetAxisUnit(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the axis unit parameter of an axis. "
    },
    {
        "No": 343,
        "FunctionC++": "WMX3APIFUNC GetVelocityFeedforwardGain(int axis, double *pGain)",
        "FunctionPython": "def GetVelocityFeedforwardGain(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the velocity feedforward gain of an axis."
    },
    {
        "No": 344,
        "FunctionC++": "WMX3APIFUNC GetAxisPolarity(int axis, char *pPolarity)",
        "FunctionPython": "def GetAxisPolatity(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the axis polarity of an axis."
    },
    {
        "No": 345,
        "FunctionC++": "WMX3APIFUNC GetAbsoluteEncoderMode(int axis, bool *pEnable)",
        "FunctionPython": "def GetAbsoluteEncoderMode(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the absolute encoder mode of an axis. "
    },
    {
        "No": 346,
        "FunctionC++": "WMX3APIFUNC GetAbsoluteEncoderHomeOffset(int axis, double *pOffset)",
        "FunctionPython": "def GetAbsoluteEncoderHomeOffset(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the absolute encoder home offset of an axis."
    },
    {
        "No": 347,
        "FunctionC++": "WMX3APIFUNC SetFeedbackParam(int axis, FeedbackParam *pParam, FeedbackParam *pParamError=NULL)",
        "FunctionPython": "def SetFeedbackParam(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set feedback parameter settings for an axis."
    },
    {
        "No": 348,
        "FunctionC++": "WMX3APIFUNC SetHomeParam(int axis, HomeParam *pParam, HomeParam *pParamError=NULL)",
        "FunctionPython": "def SetHomeParam(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set home parameter settings for an axis. "
    },
    {
        "No": 349,
        "FunctionC++": "WMX3APIFUNC SetLimitParam(int axis, LimitParam *pParam, LimitParam *pParamError=NULL)",
        "FunctionPython": "def SetLimitParam(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set limit parameter settings for an axis. "
    },
    {
        "No": 350,
        "FunctionC++": "WMX3APIFUNC SetMotionParam(int axis, MotionParam *pParam, MotionParam *pParamError=NULL)",
        "FunctionPython": "def SetMotionParam(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set motion parameter settings for an axis. "
    },
    {
        "No": 351,
        "FunctionC++": "WMX3APIFUNC SetAlarmParam(int axis, AlarmParam *pParam, AlarmParam *pParamError=NULL)",
        "FunctionPython": "def SetAlarmParam(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set alarm parameter settings for an axis. "
    },
    {
        "No": 352,
        "FunctionC++": "WMX3APIFUNC SetSyncParam(int axis, SyncParam *pParam, SyncParam *pParamError=NULL)",
        "FunctionPython": "def SetSyncParam(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set sync parameter settings for an axis. "
    },
    {
        "No": 353,
        "FunctionC++": "WMX3APIFUNC SetFlightRecorderParam(FlightRecorderParam *pParam, FlightRecorderParam *pParamError=NULL)",
        "FunctionPython": "def SetFlightRecorderParam(axis, pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set flight recorder parameters."
    },
    {
        "No": 354,
        "FunctionC++": "WMX3APIFUNC SetFlightRecorderPath(char *pPath)",
        "FunctionPython": "def SetFlightRecorderPath(pPath)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the file path to save the flight recorder data to. "
    },
    {
        "No": 355,
        "FunctionC++": "WMX3APIFUNC SetFlightRecorderPath(wchar_t *pPath)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Set the file path to save the flight recorder data to. "
    },
    {
        "No": 356,
        "FunctionC++": "WMX3APIFUNC SetEmergencyStopParam(EmergencyStopParam *pParam, EmergencyStopParam *pParamError=NULL)",
        "FunctionPython": "def SetEmergencyStopParam(pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set emergency stop parameters."
    },
    {
        "No": 357,
        "FunctionC++": "WMX3APIFUNC GetFeedbackParam(int axis, FeedbackParam *pParam)",
        "FunctionPython": "def GetFeedbackParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get feedback parameter settings for an axis."
    },
    {
        "No": 358,
        "FunctionC++": "WMX3APIFUNC GetHomeParam(int axis, HomeParam *pParam)",
        "FunctionPython": "def GetHomeParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get home parameter settings for an axis. "
    },
    {
        "No": 359,
        "FunctionC++": "WMX3APIFUNC GetLimitParam(int axis, LimitParam *pParam)",
        "FunctionPython": "def GetLimitParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get limit switch parameter settings for an axis"
    },
    {
        "No": 360,
        "FunctionC++": "WMX3APIFUNC GetMotionParam(int axis, MotionParam *pParam)",
        "FunctionPython": "def GetMotionParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get motion parameter settings for an axis. "
    },
    {
        "No": 361,
        "FunctionC++": "WMX3APIFUNC GetAlarmParam(int axis, AlarmParam *pParam)",
        "FunctionPython": "def GetAlarmParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get alarm parameter settings for an axis. "
    },
    {
        "No": 362,
        "FunctionC++": "WMX3APIFUNC GetSyncParam(int axis, SyncParam *pParam)",
        "FunctionPython": "def GetSyncParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the sync parameters of the axis. "
    },
    {
        "No": 363,
        "FunctionC++": "WMX3APIFUNC GetFlightRecorderParam(FlightRecorderParam *pParam)",
        "FunctionPython": "def GetFlightRecorderParam()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get flight recorder parameters."
    },
    {
        "No": 364,
        "FunctionC++": "WMX3APIFUNC GetEmergencyStopParam(EmergencyStopParam *pParam)",
        "FunctionPython": "def GetEmergencyStopParam()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get emergency stop parameters."
    },
    {
        "No": 365,
        "FunctionC++": "WMX3APIFUNC GetDefaultParam(SystemParam *pParam)",
        "FunctionPython": "def GetDefaultParam(pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the default system parameters. "
    },
    {
        "No": 366,
        "FunctionC++": "WMX3APIFUNC GetDefaultAxisParam(AxisParam *pAxisParam)",
        "FunctionPython": "def GetDefaultAxisParam()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the default axis parameters."
    },
    {
        "No": 367,
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam)",
        "FunctionPython": "def Export_SysPrm(pPath, pParam)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters to an xml file. "
    },
    {
        "No": 368,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters to an xml file. "
    },
    {
        "No": 369,
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, AxisParam *pAxisParam)",
        "FunctionPython": "def Export_AxisPrm(pPath, pAxisParam)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Export axis parameters to an xml file. "
    },
    {
        "No": 370,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, AxisParam *pAxisParam)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Export axis parameters to an xml file. "
    },
    {
        "No": 371,
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "FunctionPython": "def Export_SysPrm_AxisPrm(pPath, pParam, pAxisParam)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Export system and axis parameters to an xml file. "
    },
    {
        "No": 372,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Export system and axis parameters to an xml file. "
    },
    {
        "No": 373,
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam, int axis)",
        "FunctionPython": "def Export_SysPrm_Axis(pPath, pParam, axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters of one axis to an xml file."
    },
    {
        "No": 374,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam, int axis)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters of one axis to an xml file."
    },
    {
        "No": 375,
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, AxisParam *pAxisParam, int axis)",
        "FunctionPython": "def Export_AxisPrm_Axis(pPath, pAxisParam, axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Export axis parameters of one axis to an xml file. "
    },
    {
        "No": 376,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, AxisParam *pAxisParam, int axis)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": null
    },
    {
        "No": 377,
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis)",
        "FunctionPython": "def Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters to an xml file. "
    },
    {
        "No": 378,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Export system and axis parameters of one axis to an xml file."
    },
    {
        "No": 379,
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam)",
        "FunctionPython": "def Import_SysPrm(pPath)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters from an xml file. "
    },
    {
        "No": 380,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters from an xml file. "
    },
    {
        "No": 381,
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, AxisParam *pAxisParam)",
        "FunctionPython": "def Import_AxisPrm(pPath)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters from an xml file. "
    },
    {
        "No": 382,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, AxisParam *pAxisParam)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters from an xml file. "
    },
    {
        "No": 383,
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "FunctionPython": "def Import_SysPrm_AxisPrm(pPath)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters from an xml file. "
    },
    {
        "No": 384,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters from an xml file. "
    },
    {
        "No": 385,
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "FunctionPython": "def Import_SysPrm_Axis(pPath, axis, copyParamToAxes)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters of one axis from an xml file."
    },
    {
        "No": 386,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters of one axis from an xml file."
    },
    {
        "No": 387,
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "FunctionPython": "def Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters of one axis from an xml file."
    },
    {
        "No": 388,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters of one axis from an xml file."
    },
    {
        "No": 389,
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "FunctionPython": "def Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters of one axis from an xml file."
    },
    {
        "No": 390,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters of one axis from an xml file."
    },
    {
        "No": 391,
        "FunctionC++": "WMX3APIFUNC GetAndExportAll(char *pPath)",
        "FunctionPython": "def GetAndExportAll(pPath)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current parameters for all axes and export them to an xml file. "
    },
    {
        "No": 392,
        "FunctionC++": "WMX3APIFUNC GetAndExportAll(wchar_t *pPath)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Get the current parameters for all axes and export them to an xml file. "
    },
    {
        "No": 393,
        "FunctionC++": "WMX3APIFUNC ImportAndSetAll(char *pPath, SystemParam *pParamError=NULL, AxisParam *pAxisParamError=NULL)",
        "FunctionPython": "def ImportAndSetAll(path)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Imports parameters from an xml file and set them as the current parameters for all axes. "
    },
    {
        "No": 394,
        "FunctionC++": "WMX3APIFUNC ImportAndSetAll(wchar_t *pPath, SystemParam *pParamError=NULL, AxisParam *pAxisParamError=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CoreMotion Class",
        "Instruction": "Imports parameters from an xml file and set them as the current parameters for all axes. "
    },
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 397,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "AdvancedMotion Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 398,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 399,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 400,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 401,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 402,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 403,
        "FunctionC++": "WMX3APIFUNC CreateSplineBuffer(int channel, unsigned int points)",
        "FunctionPython": "def CreateSplineBuffer(channel, points)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Allocate buffer memory for a spline execution channel."
    },
    {
        "No": 404,
        "FunctionC++": "WMX3APIFUNC FreeSplineBuffer(int channel)",
        "FunctionPython": "def FreeSplineBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Free buffer memory for a spline execution channel."
    },
    {
        "No": 405,
        "FunctionC++": "WMX3APIFUNC GetSplineBufferPoints(int channel, unsigned int *pPoints)",
        "FunctionPython": "def GetSplineBufferPoints(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the amount of buffer memory currently allocated to a spline execution channel. "
    },
    {
        "No": 406,
        "FunctionC++": "WMX3APIFUNC GetSplineBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "def GetSplineBytesPerPoint()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the number of bytes required per point data in the spline execution buffer memory."
    },
    {
        "No": 407,
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "FunctionPython": "def StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 408,
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 409,
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions."
    },
    {
        "No": 410,
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions."
    },
    {
        "No": 411,
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "FunctionPython": "def StartCSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as relative positions."
    },
    {
        "No": 412,
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions."
    },
    {
        "No": 413,
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions."
    },
    {
        "No": 414,
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplineMov_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions."
    },
    {
        "No": 415,
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "FunctionPython": "def StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 416,
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 417,
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions. "
    },
    {
        "No": 418,
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCBSplinePos_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions."
    },
    {
        "No": 419,
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "FunctionPython": "def StartCBSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as relative positions."
    },
    {
        "No": 420,
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions."
    },
    {
        "No": 421,
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions."
    },
    {
        "No": 422,
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCBSplineMov_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions."
    },
    {
        "No": 423,
        "FunctionC++": "WMX3APIFUNC CreatePathIntplBuffer(int axis, unsigned int points)",
        "FunctionPython": "CreatePathIntplBuffer(axis, unsigned points)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Allocate buffer memory to an axis for the execution of path interpolation commands. "
    },
    {
        "No": 424,
        "FunctionC++": "WMX3APIFUNC FreePathIntplBuffer(int axis)",
        "FunctionPython": "FreePathIntplBuffer(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Free path interpolation buffer memory for an axis."
    },
    {
        "No": 425,
        "FunctionC++": "WMX3APIFUNC GetPathIntplBufferPoints(int axis, unsigned int *pPoints)",
        "FunctionPython": "GetPathIntplBufferPoints(axis, pPoints)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the amount of path interpolation buffer memory currently allocated to an axis. "
    },
    {
        "No": 426,
        "FunctionC++": "WMX3APIFUNC GetPathIntplBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "GetPathIntplBytesPerPoint(pBytes)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the number of bytes required per point data in the path interpolation buffer memory."
    },
    {
        "No": 427,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand)",
        "FunctionPython": "def StartPathIntplPos(pPathIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 428,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand *pPathIntplCommand)",
        "FunctionPython": "def StartPathIntplMov(pPathIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 429,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 430,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand *pPathIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 431,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 432,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 433,
        "FunctionC++": "WMX3APIFUNC OverridePathIntplVelocityMultiplier(int axis, double multiplier)",
        "FunctionPython": "def OverridePathIntplVelocityMultiplier(int axis, double multiplier)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Override a path interpolation motion using a velocity multiplier."
    },
    {
        "No": 434,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand)",
        "FunctionPython": "def StartPathIntpl3DPos(pPathIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 435,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand *pPathIntplCommand)",
        "FunctionPython": "def StartPathIntpl3DMov(pPathIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 436,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 437,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand *pPathIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntpl3DMov_Trigger(pPathIntplCommand, Trigger pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 438,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 439,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 440,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 441,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 442,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand*pPathIntplCommand,\u00a0Trigger*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 443,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand*pPathIntplCommand,\u00a0Trigger*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 444,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents, unsigned int numAddlCommands=0, PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 445,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand*pPathIntplCommand,\u00a0TriggerEvents*pTriggerEvents,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand*pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 446,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 447,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand*pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 448,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand*pPathIntplCommand,\u00a0Trigger*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 449,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand*pPathIntplCommand,\u00a0Trigger*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 450,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand*pPathIntplCommand,\u00a0TriggerEvents*pTriggerEvents,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 451,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand*pPathIntplCommand,\u00a0TriggerEvents*pTriggerEvents,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 452,
        "FunctionC++": "WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier(int axis, double multiplier)",
        "FunctionPython": "def OverridePathIntpl3DVelocityMultiplier(int axis, double multiplier)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Override a 3D path interpolation motion using a velocity multiplier."
    },
    {
        "No": 453,
        "FunctionC++": "WMX3APIFUNC CreatePathIntplWithRotationBuffer(int channel, unsigned int points)",
        "FunctionPython": "def CreatePathIntplWithRotationBuffer(channel, points)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Allocate buffer memory for a path interpolation with rotation channel."
    },
    {
        "No": 454,
        "FunctionC++": "WMX3APIFUNC FreePathIntplWithRotationBuffer(int channel)",
        "FunctionPython": "def FreePathIntplWithRotationBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Free buffer memory for a path interpolation with rotation channel."
    },
    {
        "No": 455,
        "FunctionC++": "WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "def GetPathIntplWithRotationBytesPerPoint()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the number of bytes required per point data in the path interpolation with rotation buffer memory."
    },
    {
        "No": 456,
        "FunctionC++": "WMX3APIFUNC SetPathIntplWithRotationConfiguration(int channel, PathIntplWithRotationConfiguration *pConfig)",
        "FunctionPython": "def SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Set the configuration data for a path interpolation with rotation channel."
    },
    {
        "No": 457,
        "FunctionC++": "WMX3APIFUNC AddPathIntplWithRotationCommand(int channel, PathIntplWithRotationCommand *pCommand)",
        "FunctionPython": "def AddPathIntplWithRotationCommand(channel, pCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Add interpolation commands to a path interpolation with rotation channel."
    },
    {
        "No": 458,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel)",
        "FunctionPython": "def StartPathIntplWithRotation(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute motion for a path interpolation with rotation channel."
    },
    {
        "No": 459,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntplWithRotation_Trigger(channel, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 460,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied. "
    },
    {
        "No": 461,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos)",
        "FunctionPython": "def StartPathIntplWithRotation_Pos(channel, double pos)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute motion to the specified position for a path interpolation with rotation channel."
    },
    {
        "No": 462,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntplWithRotation_Pos_Trigger(channel, double pos, Trigger pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 463,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 464,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, unsigned int point)",
        "FunctionPython": "def StartPathIntplWithRotation_Point(channel, point)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute motion to the specified point for a path interpolation with rotation channel. "
    },
    {
        "No": 465,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, unsigned int point, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion to the specified point for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 466,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, unsigned int point, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion to the specified point for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 467,
        "FunctionC++": "WMX3APIFUNC ClearPathIntplWithRotation(int channel)",
        "FunctionPython": "def ClearPathIntplWithRotation(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Clear all data for a path interpolation with rotation channel."
    },
    {
        "No": 468,
        "FunctionC++": "WMX3APIFUNC GetPathIntplWithRotationStatus(int channel, PathIntplWithRotationStatus *pStatus)",
        "FunctionPython": "def GetPathIntplWithRotationStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the current status for a path inteprolation with rotation channel."
    },
    {
        "No": 469,
        "FunctionC++": "WMX3APIFUNC CreatePathIntplLookaheadBuffer(int channel, unsigned int points)",
        "FunctionPython": "def CreatePathIntplLookaheadBuffer(channel, points)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Allocate buffer memory for a path interpolation with look ahead channel. "
    },
    {
        "No": 470,
        "FunctionC++": "WMX3APIFUNC FreePathIntplLookaheadBuffer(int channel)",
        "FunctionPython": "def FreePathIntplLookaheadBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Free buffer memory for a path interpolation with lookahead channel. "
    },
    {
        "No": 471,
        "FunctionC++": "WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "def GetPathIntplLookaheadBytesPerPoint()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the number of bytes required per point data in the path interpolation with look ahead buffer memory."
    },
    {
        "No": 472,
        "FunctionC++": "WMX3APIFUNC SetPathIntplLookaheadConfiguration(int channel, PathIntplLookaheadConfiguration *pConfig)",
        "FunctionPython": "def SetPathIntplLookaheadConfiguration(channel, pConfig)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Set the configuration data for a path interpolation with lookahead channel. "
    },
    {
        "No": 473,
        "FunctionC++": "WMX3APIFUNC AddPathIntplLookaheadCommand(int channel, PathIntplLookaheadCommand *pCommand)",
        "FunctionPython": "def AddPathIntplLookaheadCommand(channel, pCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Add interpolation commands to a path interpolation with look ahead channel. "
    },
    {
        "No": 474,
        "FunctionC++": "WMX3APIFUNC StartPathIntplLookahead(int channel)",
        "FunctionPython": "def StartPathIntplLookahead(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start the motion for a path interpolation with look ahead channel."
    },
    {
        "No": 475,
        "FunctionC++": "WMX3APIFUNC StopPathIntplLookahead(int channel)",
        "FunctionPython": "def StopPathIntplLookahead(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Stop the motion for a path interpolation with look ahead channel."
    },
    {
        "No": 476,
        "FunctionC++": "WMX3APIFUNC ClearPathIntplLookahead(int channel)",
        "FunctionPython": "def ClearPathIntplLookahead(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Clear all data for a path interpolation with look ahead channel."
    },
    {
        "No": 477,
        "FunctionC++": "WMX3APIFUNC GetPathIntplLookaheadStatus(int channel, PathIntplLookaheadStatus *pStatus)",
        "FunctionPython": "def GetPathIntplLookaheadStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the current status for a path interpolation with look ahead channel. "
    },
    {
        "No": 478,
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(CoordinatedPosCommand *pPosCommand)",
        "FunctionPython": "def StartCoordinatedPos(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an interpolation between two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time."
    },
    {
        "No": 479,
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(unsigned int numCommands, CoordinatedPosCommand *pPosCommand)",
        "FunctionPython": "def StartCoordinatedPos(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start multiple interpolations, each between pairs of two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time. "
    },
    {
        "No": 480,
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(CoordinatedJerkRatioPosCommand *pPosCommand)",
        "FunctionPython": "def StartCoordinatedPos_JerkRatio(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an interpolation between two or more axes, where one axis executes a normal position command and the remaining axes travel the specified distances in the same amount of time."
    },
    {
        "No": 481,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkLinearPos(TwoLinkLinearCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkLinearPos(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 482,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkLinearMov(TwoLinkLinearCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkLinearMov(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates."
    },
    {
        "No": 483,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkRotaryPos(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkRotaryPos(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 484,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkRotaryMov(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkRotaryMov(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates."
    },
    {
        "No": 485,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredLinearPos(TwoLinkLinearCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkUntetheredLinearPos(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 486,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredLinearMov(TwoLinkLinearCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates."
    },
    {
        "No": 487,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredRotaryPos(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 488,
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredRotaryMov(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "FunctionPython": "def StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates."
    },
    {
        "No": 489,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntplCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "FunctionPython": "def SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move distance, remain distance, and total distance after the path interpolation runs for a specified amount of time are returned."
    },
    {
        "No": 490,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePathIntplCommand *pPathIntplCommand, double specificPos1, double specificPos2, unsigned int minimumSearchIndex, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds,double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtPos(pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned."
    },
    {
        "No": 491,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntplCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtDist(pPathIntplCommand, specificDistance)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move time, remain time, and total time after the path interpolation runs for the specified distance are returned."
    },
    {
        "No": 492,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntpl3DCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pPos3, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "FunctionPython": "def SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move distance, remain distance, and total distance after the 3D path interpolation runs for a specified amount of time are returned."
    },
    {
        "No": 493,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePathIntpl3DCommand *pPathIntplCommand, double specificPos1, double specificPos2, double specificPos3, unsigned int minimumSearchIndex, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds,double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned"
    },
    {
        "No": 494,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntpl3DCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move time, remain time, and total time after the 3D path interpolation runs for the specified distance are returned."
    },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 496,
        "FunctionC++": "WMX3APIFUNC SetConstantLinearVel(int masterAxis, int slaveAxis, double centerPos, double minR, double positiveMaxR, double negativeMaxR, double constLinVel, double initVelVariance)",
        "FunctionPython": "def SetConstantLinearVel(masterAxis, slaveAxis, centerPos, minR,positiveMaxR, negativeMaxR, constLinVel, initVelVariance)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start constant linear velocity control for an axis."
    },
    {
        "No": 497,
        "FunctionC++": "WMX3APIFUNC ResolveConstantLinearVel(int axis)",
        "FunctionPython": "def ResolveConstantLinearVel(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Resolve constant linear velocity control for an axis."
    },
    {
        "No": 498,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 499,
        "FunctionC++": "WMX3APIFUNC StartECAM(int channel, ECAMData *pECAMData)",
        "FunctionPython": "def StartECAM(channel, pECAMData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start E-CAM control."
    },
    {
        "No": 500,
        "FunctionC++": "WMX3APIFUNC GetECAM(int channel, ECAMData *pECAMData)",
        "FunctionPython": "def GetECAM(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get E-CAM control parameters."
    },
    {
        "No": 501,
        "FunctionC++": "WMX3APIFUNC StopECAM(int channel)",
        "FunctionPython": "def StopECAM(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Stop E-CAM control."
    },
    {
        "No": 502,
        "FunctionC++": "WMX3APIFUNC StartDancerControl(int axis, DancerControlOptions *pDancerControlOptions)",
        "FunctionPython": "def StartDancerControl(axis, AdvSync_DancerControlOptions pDancerControlOptions)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start dancer control."
    },
    {
        "No": 503,
        "FunctionC++": "WMX3APIFUNC StopDancerControl(int axis)",
        "FunctionPython": "def StopDancerControl(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Stop dancer control."
    },
    {
        "No": 504,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 505,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 506,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CyclicBuffer Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 507,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "CyclicBuffer Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 508,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CyclicBuffer Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 509,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 510,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CyclicBuffer Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 511,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 512,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis."
    },
    {
        "No": 513,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes."
    },
    {
        "No": 514,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 515,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 516,
        "FunctionC++": "WMX3APIFUNC CloseCyclicBuffer(int axis)",
        "FunctionPython": "def CloseCyclicBuffer(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Close the cyclic buffer memory space of an axis."
    },
    {
        "No": 517,
        "FunctionC++": "WMX3APIFUNC CloseCyclicBuffer(AxisSelection *pAxisSelection)",
        "FunctionPython": "def CloseCyclicBuffer_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Close the cyclic buffer memory space of multiple axes."
    },
    {
        "No": 518,
        "FunctionC++": "WMX3APIFUNC AddCommand(int axis, CyclicBufferSingleAxisCommand *pCmd)",
        "FunctionPython": "def AddCommand(axis, pCmd)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Add one position command data to the cyclic position command buffer of one axis. "
    },
    {
        "No": 519,
        "FunctionC++": "WMX3APIFUNC AddCommand(int axis, CyclicBufferSingleAxisCommand *pCmd, int count)",
        "FunctionPython": "def AddCommand(axis, pCmd, count)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Add any number of position command data to the cyclic position command buffer of one axis. "
    },
    {
        "No": 520,
        "FunctionC++": "WMX3APIFUNC AddCommand(AxisSelection *pAxisSelection, CyclicBufferMultiAxisCommands *pCmds)",
        "FunctionPython": "def AddCommand_AxisSel(pAxisSelection, pCmds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Add one position command data each to the cyclic position command buffer of multiple axes. "
    },
    {
        "No": 521,
        "FunctionC++": "WMX3APIFUNC AddCommand(AxisSelection *pAxisSelection, CyclicBufferMultiAxisCommands *pCmds, int count)",
        "FunctionPython": "def AddCommand_AxisSel(pAxisSelection, pCmds, count)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Add any number of position command data to the cyclic position command buffer of multiple axes."
    },
    {
        "No": 522,
        "FunctionC++": "WMX3APIFUNC Execute(int axis, CyclicBufferSingleAxisOption *pOption=NULL)",
        "FunctionPython": "def Execute(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Start the execution of the cyclic position command buffer for a single axis."
    },
    {
        "No": 523,
        "FunctionC++": "WMX3APIFUNC Execute(AxisSelection *pAxisSelection, CyclicBufferMultiAxisOption *pOption=NULL)",
        "FunctionPython": "def Execute_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Start the execution of the cyclic position command buffer for multiple axes. "
    },
    {
        "No": 524,
        "FunctionC++": "WMX3APIFUNC Abort(int axis)",
        "FunctionPython": "def Abort(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Class",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and clear the buffer. "
    },
    {
        "No": 525,
        "FunctionC++": "WMX3APIFUNC Abort(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Abort_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and clear the buffer. "
    },
    {
        "No": 526,
        "FunctionC++": "WMX3APIFUNC GetStatus(int axis, CyclicBufferSingleAxisStatus *pStatus)",
        "FunctionPython": "def GetStatus(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get the cyclic position command buffer status of the specified axis."
    },
    {
        "No": 527,
        "FunctionC++": "WMX3APIFUNC GetStatus(AxisSelection *pAxisSelection, CyclicBufferMultiAxisStatus *pStatus)",
        "FunctionPython": "def GetStatus_AxisSel(pAxisSelection)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get the cyclic position command buffer status of the specified axes. "
    },
    {
        "No": 528,
        "FunctionC++": "int GetInputModuleId()",
        "FunctionPython": "def GetInputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 529,
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize, char *initialState)",
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize, initialState)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 530,
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 531,
        "FunctionC++": "int GetOutputModuleId()",
        "FunctionPython": "def GetOutputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 532,
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)",
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 533,
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 534,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "EventControl Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 535,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 536,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "EventControl Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 537,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 538,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 539,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "EventControl Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 540,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 541,
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "FunctionPython": "def SetEvent(pEventInput, pEventOutput)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Set an event."
    },
    {
        "No": 542,
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "FunctionPython": "def SetEvent_Option(pEventInput, pEventOutput, pOption)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Set an event."
    },
    {
        "No": 543,
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, int id, EventOption *pOption=NULL)",
        "FunctionPython": "def SetEvent_ID(pEventInput, pEventOutput, id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Set an event."
    },
    {
        "No": 544,
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, int id, EventOption *pOption=NULL)",
        "FunctionPython": "def SetEvent_ID_Option(pEventInput, pEventOutput, id, pOption)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Set an event."
    },
    {
        "No": 545,
        "FunctionC++": "WMX3APIFUNC GetEventModuleId(int id, int *pInputModuleId, int *pOutputModuleId)",
        "FunctionPython": "def GetEventModuleId(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the input function module ID and output function module ID of an existing event."
    },
    {
        "No": 546,
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "FunctionPython": "def GetEvent_InOut(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get an event."
    },
    {
        "No": 547,
        "FunctionC++": "WMX3APIFUNC GetEventOption(int id, EventOption *pOption)",
        "FunctionPython": "def GetEventOption(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the option settings of an existing event. "
    },
    {
        "No": 548,
        "FunctionC++": "WMX3APIFUNC SetEventInput(int id, EventInput *pEventInput)",
        "FunctionPython": "def SetEventInput(id, pEventInput)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "This function sets the input function of an event."
    },
    {
        "No": 549,
        "FunctionC++": "WMX3APIFUNC SetEventOutput(int id, EventOutput *pEventOutput)",
        "FunctionPython": "def SetEventOutput(id, pEventOutput)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "This function sets the output function of an event."
    },
    {
        "No": 550,
        "FunctionC++": "WMX3APIFUNC GetEventInput(int id, EventInput *pEventInput)",
        "FunctionPython": "def GetEventInput(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "This function gets the input function of an event. "
    },
    {
        "No": 551,
        "FunctionC++": "WMX3APIFUNC GetEventOutput(int id, EventOutput *pEventOutput)",
        "FunctionPython": "def GetEventOutput(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "This function gets the output function of an event. "
    },
    {
        "No": 552,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 553,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID_In(filterInputModuleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 554,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID_InOut(filterInputModuleId, filterOutputModuleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 555,
        "FunctionC++": "WMX3APIFUNC EnableEvent(int id, unsigned char enable)",
        "FunctionPython": "def EnableEvent(id, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Enable or disable an existing event."
    },
    {
        "No": 556,
        "FunctionC++": "WMX3APIFUNC RemoveEvent(int id)",
        "FunctionPython": "def RemoveEvent(id)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Remove an existing event."
    },
    {
        "No": 557,
        "FunctionC++": "WMX3APIFUNC ClearAllEvent()",
        "FunctionPython": "def ClearAllEvent()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Clear all existing events."
    },
    {
        "No": 558,
        "FunctionC++": "WMX3APIFUNC SetCustomEvent(int *pId, int inputModuleId, void *pInputData, int inputDataSize, int outputModuleId, void *pOutputData, int outputDataSize, int id, CustomEventOption *pOption=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 559,
        "FunctionC++": "WMX3APIFUNC SetCustomEventInput(int id, int moduleId, void *pInputData, int inputDataSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 560,
        "FunctionC++": "WMX3APIFUNC SetCustomEventOutput(int id, int moduleId, void *pOutputData, int outputDataSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 561,
        "FunctionC++": "WMX3APIFUNC GetCustomEventInput(int id, void *pInputDataBuff, int inputDataBuffSize, int *pInputDataSize, int *pModuleId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 562,
        "FunctionC++": "WMX3APIFUNC GetCustomEventOutput(int id, void *pOutputDataBuff, int outputDataBuffSize, int *pOutputDataSize, int *pModuleId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 563,
        "FunctionC++": "WMX3APIFUNC SetCustomEventConfigureOfModule(int moduleId, void *pSetEventData, int setEventDataSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 564,
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, Event *pEventData)",
        "FunctionPython": "def SetEvent(pEventData)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Set an event."
    },
    {
        "No": 565,
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, Event *pEventData, unsigned int id)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": "Set an event."
    },
    {
        "No": 566,
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, Event *pEventData)",
        "FunctionPython": "def GetEvent(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the parameters of an event. "
    },
    {
        "No": 567,
        "FunctionC++": "WMX3APIFUNC SetSoftwareTouchProbe(unsigned int channel, unsigned char enable, int axis, int byteAddrs, int bitOffset, unsigned char logic, TouchProbeMode::T mode)",
        "FunctionPython": "def SetSoftwareTouchProbe(channel, enable, axis, byteAddrs, bitOffset, logic, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a software touch probe channel. A software touch probe channel is able to latch onto the encoder data of an axis when a particular input signal is detected."
    },
    {
        "No": 568,
        "FunctionC++": "WMX3APIFUNC EnableSoftwareTouchProbe(unsigned int channel, unsigned char enable)",
        "FunctionPython": "def EnableSoftwareTouchProbe(channel, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Enable a software touch probe channel. A software touch probe channel will only latch encoder data when enabled."
    },
    {
        "No": 569,
        "FunctionC++": "WMX3APIFUNC GetSoftwareTouchProbe(unsigned int channel, unsigned char *pEnabled, int *pAxis, int *pByteAddrs, int *pBitOffset, unsigned char *pLogic, TouchProbeMode::T *pMode)",
        "FunctionPython": "def GetSoftwareTouchProbe(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get parameters of a software touch probe channel."
    },
    {
        "No": 570,
        "FunctionC++": "WMX3APIFUNC IsSoftwareTouchProbeLatched(unsigned int channel, unsigned char *pLatched)",
        "FunctionPython": "def IsSoftwareTouchProbeLatched(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Check whether a software touch probe channel has latched data. "
    },
    {
        "No": 571,
        "FunctionC++": "WMX3APIFUNC GetSoftwareTouchProbeCounterValue(unsigned int channel, unsigned char *pLatched, double *pCounterValue)",
        "FunctionPython": "def GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get latched data of software touch probe."
    },
    {
        "No": 572,
        "FunctionC++": "WMX3APIFUNC SetHardwareTouchProbe(int axis, unsigned char enable, TouchProbeMode::T mode, TouchProbeSource::T triggerSource, unsigned int channel)",
        "FunctionPython": "def SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for the hardware touch probe of an axis. A hardware touch probe latches the encoder data of the axis when the touch probe input signal is detected."
    },
    {
        "No": 573,
        "FunctionC++": "WMX3APIFUNC GetHardwareTouchProbeStatus(int axis, HardwareTouchProbeStatus *pStatus)",
        "FunctionPython": "def GetHardwareTouchProbeStatus(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get parameters and current state of the hardware touch probe of an axis. "
    },
    {
        "No": 574,
        "FunctionC++": "WMX3APIFUNC EnableHardwareTouchProbe(int axis, unsigned char enable)",
        "FunctionPython": "def EnableHardwareTouchProbe(axis, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Enable or disable the hardware touch probe of an axis."
    },
    {
        "No": 575,
        "FunctionC++": "WMX3APIFUNC SetPSOConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, PSOOutput *pOutput, double minDurationMilliseconds, PSOOption *pOption=NULL)",
        "FunctionPython": "def SetPSOConfig(channel, pType, pMinDurationMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met. "
    },
    {
        "No": 576,
        "FunctionC++": "WMX3APIFUNC SetPSOConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, PSOOutput *pOutput, double minDurationMilliseconds, PSOOption *pOption=NULL)",
        "FunctionPython": "def SetPSOConfig_Option(channel, pType, pMinDurationMilliseconds, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met. "
    },
    {
        "No": 577,
        "FunctionC++": "WMX3APIFUNC GetPSOConfig(unsigned int channel, ComparisonType::T *pType, ComparatorSource *pSource,PSOOutput *pOutput, double *pMinDurationMilliseconds, PSOOption *pOption=NULL)",
        "FunctionPython": "def GetPSOConfig(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get parameters for a position synchronous output channel."
    },
    {
        "No": 578,
        "FunctionC++": "WMX3APIFUNC GetPSOConfig(unsigned int channel, ComparisonType::T *pType, ComparatorSource *pSource,PSOOutput *pOutput, double *pMinDurationMilliseconds, PSOOption *pOption=NULL)",
        "FunctionPython": "def GetPSOConfig_Option(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get parameters for a position synchronous output channel."
    },
    {
        "No": 579,
        "FunctionC++": "WMX3APIFUNC SetPSOSingleData(unsigned int channel, double sData)",
        "FunctionPython": "def SetPSOSingleData(channel, sData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set a single data point for a position synchronous output channel."
    },
    {
        "No": 580,
        "FunctionC++": "WMX3APIFUNC SetPSOMultipleData(unsigned int channel, int count, double *pMData)",
        "FunctionPython": "def SetPSOMultipleData(channel, count, pMData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set multiple data points for a position synchronous output channel."
    },
    {
        "No": 581,
        "FunctionC++": "WMX3APIFUNC SetPSOIntervalData(unsigned int channel, double rangeStart, double rangeEnd, double interval)",
        "FunctionPython": "def SetPSOIntervalData(channel, rangeStart, rangeEnd, interval)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set data points over a range for a position synchronous output channel."
    },
    {
        "No": 582,
        "FunctionC++": "WMX3APIFUNC GetPSOData(unsigned int channel, int *pCount, double *pMData, int maxCount)",
        "FunctionPython": "def GetPSOData(channel, maxCount)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get all data points that are currently set for a position synchronous output channel."
    },
    {
        "No": 583,
        "FunctionC++": "WMX3APIFUNC GetPSODataCount(unsigned int channel, int *pCount)",
        "FunctionPython": "def GetPSODataCount(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the number of data points that are currently set for a position synchronous output channel. "
    },
    {
        "No": 584,
        "FunctionC++": "WMX3APIFUNC GetPSOIntervalData(unsigned int channel, double *pRangeStart, double *pRangeEnd, double *pInterval)",
        "FunctionPython": "def GetPSOIntervalData(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the range and interval of a position synchronous output channel. "
    },
    {
        "No": 585,
        "FunctionC++": "WMX3APIFUNC StartPSO(unsigned int channel)",
        "FunctionPython": "def StartPSO(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Start a position synchronous output channel. A position synchronous output channel must be started before it controls the output."
    },
    {
        "No": 586,
        "FunctionC++": "WMX3APIFUNC StopPSO(unsigned int channel)",
        "FunctionPython": "def StopPSO(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Stop a position synchronous output channel. A stopped position synchronous output channel will stop controlling any outputs. "
    },
    {
        "No": 587,
        "FunctionC++": "WMX3APIFUNC GetPSOStatus(unsigned int channel, PSOStatus *pStatus)",
        "FunctionPython": "def GetPSOStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the state of a position synchronous output channel."
    },
    {
        "No": 588,
        "FunctionC++": "WMX3APIFUNC SetPlannedVelOverrideConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, int axis)",
        "FunctionPython": "def SetPlannedVelOverrideConfig(channel, type, pSource, axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a planned velocity override channel. A planned velocity override channel is able to override the velocity of an axis when certain conditions, such as an axis reaching a certain position, are met."
    },
    {
        "No": 589,
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideConfig(unsigned int channel, ComparisonType::T *pType, ComparatorSource *pSource, int *pAxis)",
        "FunctionPython": "def GetPlannedVelOverrideConfig(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get parameters for a planned velocity override channel."
    },
    {
        "No": 590,
        "FunctionC++": "WMX3APIFUNC SetPlannedVelOverrideSingleData(unsigned int channel, PlannedVelocityData sData)",
        "FunctionPython": "def SetPlannedVelOverrideSingleData(channel, sData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set a single data point for a planned velocity override channel. "
    },
    {
        "No": 591,
        "FunctionC++": "WMX3APIFUNC SetPlannedVelOverrideMultipleData(unsigned int channel, int count, PlannedVelocityData *pMData)",
        "FunctionPython": "def SetPlannedVelOverrideMultipleData(channel, count, pMData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set multiple data points for a planned velocity override channel."
    },
    {
        "No": 592,
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideData(unsigned int channel, int *pCount, PlannedVelocityData *pMData, int maxCount)",
        "FunctionPython": "def GetPlannedVelOverrideData(channel, maxCount)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get all data points that are currently set for a planned velocity override channel."
    },
    {
        "No": 593,
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideDataCount(unsigned int channel, int *pCount)",
        "FunctionPython": "def GetPlannedVelOverrideDataCount(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the number of data points that are currently set for a planned velocity override channel. "
    },
    {
        "No": 594,
        "FunctionC++": "WMX3APIFUNC StartPlannedVelOverride(unsigned int channel)",
        "FunctionPython": "def StartPlannedVelOverride(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Start a planned velocity override channel. A planned velocity override channel must be started before it controls the output. "
    },
    {
        "No": 595,
        "FunctionC++": "WMX3APIFUNC StopPlannedVelOverride(unsigned int channel)",
        "FunctionPython": "def StopPlannedVelOverride(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Stop a planned velocity override channel. A stopped planned velocity override channel will stop controlling any outputs."
    },
    {
        "No": 596,
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideStatus(unsigned int channel, PlannedVelocityStatus *pStatus)",
        "FunctionPython": "def GetPlannedVelOverrideStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the state of a planned velocity override channel."
    },
    {
        "No": 597,
        "FunctionC++": "int GetInputModuleId()",
        "FunctionPython": "def GetInputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 598,
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize, char *initialState)",
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize, initialState)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 599,
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 600,
        "FunctionC++": "int GetOutputModuleId()",
        "FunctionPython": "def GetOutputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 601,
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)",
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 602,
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 603,
        "FunctionC++": "int GetModuleId()",
        "FunctionPython": "def GetModuleId()",
        "ReturnType": "unsigned int",
        "ReturnValue": "ID of the module",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 604,
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize)",
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 605,
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": null
    },
    {
        "No": 606,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 607,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 608,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "Io Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 609,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 610,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 611,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "Io Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 612,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 613,
        "FunctionC++": "WMX3APIFUNC SetOutBit(int addr, int bit, unsigned char data)",
        "FunctionPython": "def SetOutBit(addr, bit, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of an output bit."
    },
    {
        "No": 614,
        "FunctionC++": "WMX3APIFUNC SetOutByte(int addr, unsigned char data)",
        "FunctionPython": "def SetOutByte(addr, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of an output byte."
    },
    {
        "No": 615,
        "FunctionC++": "WMX3APIFUNC SetOutBytes(int addr, int size, unsigned char *pData)",
        "FunctionPython": "def SetOutBytes(addr, size, pData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of multiple output bytes."
    },
    {
        "No": 616,
        "FunctionC++": "WMX3APIFUNC SetOutBits(int *pAddr, int *pBit, unsigned char *pData, int count)",
        "FunctionPython": "def SetOutBits(pByte, pBit, pData, count)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of multiple output bits."
    },
    {
        "No": 617,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataChar(int addr, char analogData)",
        "FunctionPython": "def SetOutAnalogDataChar(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning one byte."
    },
    {
        "No": 618,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUChar(int addr, unsigned char analogData)",
        "FunctionPython": "def SetOutAnalogDataUChar(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning one byte."
    },
    {
        "No": 619,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataShort(int addr, short analogData)",
        "FunctionPython": "def SetOutAnalogDataShort(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning two bytes."
    },
    {
        "No": 620,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUShort(int addr, unsigned short analogData)",
        "FunctionPython": "def SetOutAnalogDataUShort(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning two bytes."
    },
    {
        "No": 621,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataInt(int addr, int analogData)",
        "FunctionPython": "def SetOutAnalogDataInt(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning four bytes."
    },
    {
        "No": 622,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUInt(int addr, unsigned int analogData)",
        "FunctionPython": "def SetOutAnalogDataUInt(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning four bytes."
    },
    {
        "No": 623,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskMode(bool enable)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Set the bitmask mode of output."
    },
    {
        "No": 624,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskBit(int addr, int bit, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Set the bitmask of output bit."
    },
    {
        "No": 625,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskByte(int addr, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Set the bitmask of an output byte."
    },
    {
        "No": 626,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskBytes(int addr, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Set the bitmask of multiple output bytes. "
    },
    {
        "No": 627,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskBits(int *pAddr, int *pBit, unsigned char *pData, int count)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Set the bitmask of multiple output bits."
    },
    {
        "No": 628,
        "FunctionC++": "WMX3APIFUNC GetInBit(int addr, int bit, unsigned char *pData)",
        "FunctionPython": "def GetInBit(addr, bit)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an input bit."
    },
    {
        "No": 629,
        "FunctionC++": "WMX3APIFUNC GetInByte(int addr, unsigned char *pData)",
        "FunctionPython": "def GetInByte(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an input byte. "
    },
    {
        "No": 630,
        "FunctionC++": "WMX3APIFUNC GetInBytes(int addr, int size, unsigned char *pData)",
        "FunctionPython": "def GetInBytes(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of multiple input bytes."
    },
    {
        "No": 631,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataChar(int addr, char *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataChar(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 632,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUChar(int addr, unsigned char *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataUChar(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 633,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataShort(int addr, short *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataShort(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning two bytes."
    },
    {
        "No": 634,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUShort(int addr, unsigned short *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataUShort(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning two bytes."
    },
    {
        "No": 635,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataInt(int addr, int *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataInt(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 636,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUInt(int addr, unsigned int *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataUInt(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 637,
        "FunctionC++": "WMX3APIFUNC GetOutBit(int addr, int bit, unsigned char *pData)",
        "FunctionPython": "def GetOutBit(addr, bit)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an output bit."
    },
    {
        "No": 638,
        "FunctionC++": "WMX3APIFUNC GetOutByte(int addr, unsigned char *pData)",
        "FunctionPython": "def GetOutByte(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an output byte."
    },
    {
        "No": 639,
        "FunctionC++": "WMX3APIFUNC GetOutBytes(int addr, int size, unsigned char *pData)",
        "FunctionPython": "def GetOutBytes(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of multiple output bytes. "
    },
    {
        "No": 640,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataChar(int addr, char *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataChar(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning one byte."
    },
    {
        "No": 641,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUChar(int addr, unsigned char *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataUChar(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning one byte."
    },
    {
        "No": 642,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataShort(int addr, short *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataShort(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning two bytes."
    },
    {
        "No": 643,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUShort(int addr, unsigned short *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataUShort(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning two bytes."
    },
    {
        "No": 644,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataInt(int addr, int *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataInt(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning four bytes."
    },
    {
        "No": 645,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUInt(int addr, unsigned int *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataUInt(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning four bytes."
    },
    {
        "No": 646,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskMode(bool *pEnable)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get the bitmask mode of output."
    },
    {
        "No": 647,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskBit(int addr, int bit, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get the bitmask of an output bit."
    },
    {
        "No": 648,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskByte(int addr, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get the bitmask of an output byte."
    },
    {
        "No": 649,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskBytes(int addr, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get the bitmask of multiple output bytes. "
    },
    {
        "No": 650,
        "FunctionC++": "WMX3APIFUNC SetOutBitEx(int addr, int bit, unsigned char data)",
        "FunctionPython": "def SetOutBitEx(addr, bit, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of an output bit."
    },
    {
        "No": 651,
        "FunctionC++": "WMX3APIFUNC SetOutByteEx(int addr, unsigned char data)",
        "FunctionPython": "def SetOutByteEx(addr, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of an output byte. "
    },
    {
        "No": 652,
        "FunctionC++": "WMX3APIFUNC SetOutBytesEx(int addr, int size, unsigned char *pData)",
        "FunctionPython": "def SetOutBytesEx(addr, size, pData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of multiple output bytes."
    },
    {
        "No": 653,
        "FunctionC++": "WMX3APIFUNC SetOutBitsEx(int *pAddr, int *pBit, unsigned char *pData, int count)",
        "FunctionPython": "def SetOutBitsEx(pByte, pBit, pData, count)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of multiple output bits. "
    },
    {
        "No": 654,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataCharEx(int addr, char analogData)",
        "FunctionPython": "def SetOutAnalogDataCharEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning one byte."
    },
    {
        "No": 655,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUCharEx(int addr, unsigned char analogData)",
        "FunctionPython": "def SetOutAnalogDataUCharEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning one byte. "
    },
    {
        "No": 656,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataShortEx(int addr, short analogData)",
        "FunctionPython": "def SetOutAnalogDataShortEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning two bytes. "
    },
    {
        "No": 657,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUShortEx(int addr, unsigned short analogData)",
        "FunctionPython": "def SetOutAnalogDataUShortEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning two bytes."
    },
    {
        "No": 658,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataIntEx(int addr, int analogData)",
        "FunctionPython": "def SetOutAnalogDataIntEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning four bytes. "
    },
    {
        "No": 659,
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUIntEx(int addr, unsigned int analogData)",
        "FunctionPython": "def SetOutAnalogDataUIntEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the value of output analog data spanning four bytes."
    },
    {
        "No": 660,
        "FunctionC++": "WMX3APIFUNC GetInBitEx(int addr, int bit, unsigned char *pData)",
        "FunctionPython": "def GetInBitEx(addr, bit)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an input bit. "
    },
    {
        "No": 661,
        "FunctionC++": "WMX3APIFUNC GetInByteEx(int addr, unsigned char *pData)",
        "FunctionPython": "def GetInByteEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an input byte."
    },
    {
        "No": 662,
        "FunctionC++": "WMX3APIFUNC GetInBytesEx(int addr, int size, unsigned char *pData)",
        "FunctionPython": "def GetInBytesEx(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of multiple input bytes."
    },
    {
        "No": 663,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataCharEx(int addr, char *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataCharEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 664,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUCharEx(int addr, unsigned char *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataUCharEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 665,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataShortEx(int addr, short *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataShortEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning two bytes"
    },
    {
        "No": 666,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUShortEx(int addr, unsigned short *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataUShortEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning two bytes."
    },
    {
        "No": 667,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataIntEx(int addr, int *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataIntEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 668,
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUIntEx(int addr, unsigned int *pAnalogData)",
        "FunctionPython": "def GetInAnalogDataUIntEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 669,
        "FunctionC++": "WMX3APIFUNC GetOutBitEx(int addr, int bit, unsigned char *pData)",
        "FunctionPython": "def GetOutBitEx(addr, bit)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an output bit."
    },
    {
        "No": 670,
        "FunctionC++": "WMX3APIFUNC GetOutByteEx(int addr, unsigned char *pData)",
        "FunctionPython": "def GetOutByteEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of an output byte."
    },
    {
        "No": 671,
        "FunctionC++": "WMX3APIFUNC GetOutBytesEx(int addr, int size, unsigned char *pData)",
        "FunctionPython": "def GetOutBytesEx(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of multiple output bytes."
    },
    {
        "No": 672,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataCharEx(int addr, char *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataCharEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning one byte. "
    },
    {
        "No": 673,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUCharEx(int addr, unsigned char *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataUCharEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning one byte."
    },
    {
        "No": 674,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataShortEx(int addr, short *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataShortEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning two bytes. "
    },
    {
        "No": 675,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUShortEx(int addr, unsigned short *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataUShortEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning two bytes. "
    },
    {
        "No": 676,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataIntEx(int addr, int *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataIntEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning four bytes."
    },
    {
        "No": 677,
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUIntEx(int addr, unsigned int *pAnalogData)",
        "FunctionPython": "def GetOutAnalogDataUIntEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the value of output analog data spanning four bytes. "
    },
    {
        "No": 678,
        "FunctionC++": "WMX3APIFUNC SetInitialOutByte(int addr, unsigned char data, unsigned char enable)",
        "FunctionPython": "def SetInitialOutByte(addr, data, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the initial value of an output byte that is applied when communication is started."
    },
    {
        "No": 679,
        "FunctionC++": "WMX3APIFUNC SetInitialOutBytes(int addr, int size, unsigned char *pData, unsigned char *pEnable)",
        "FunctionPython": "def SetInitialOutBytes(addr, size, pData, pEnable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Io Class",
        "Instruction": "Set the initial values of multiple output bytes that are applied when communication is started. "
    },
    {
        "No": 680,
        "FunctionC++": "WMX3APIFUNC GetInitialOutByte(int addr, unsigned char *pData, unsigned char *pEnable)",
        "FunctionPython": "def GetInitialOutByte(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Set the initial values of multiple output bytes that are applied when communication is started. "
    },
    {
        "No": 681,
        "FunctionC++": "WMX3APIFUNC GetInitialOutBytes(int addr, int size, unsigned char *pData, unsigned char *pEnable)",
        "FunctionPython": "def GetInitialOutBytes(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the initial values of multiple output bytes that are applied when communication is started. "
    },
    {
        "No": 682,
        "FunctionC++": "WMX3APIFUNC GetInitialOutByteInterruptId(int addr, unsigned char *pInterruptId)",
        "FunctionPython": "def GetInitialOutByteInterruptId(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": " Get the ID of the interrupt (cyclic handler) that will set the initial value of the specified output byte. "
    },
    {
        "No": 683,
        "FunctionC++": "WMX3APIFUNC GetInitialOutBytesInterruptId(int addr, int size, unsigned char *pInterruptId)",
        "FunctionPython": "def GetInitialOutBytesInterruptId(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class",
        "Instruction": "Get the IDs of the interrupts (cyclic handlers) that will set the initial values of the specified output bytes."
    },
    {
        "No": 684,
        "FunctionC++": "int GetModuleId()",
        "FunctionPython": "def GetModuleId()",
        "ReturnType": "unsigned int",
        "ReturnValue": "ID of the module",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 685,
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize)",
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 686,
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 687,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "log Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 688,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 689,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "log Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 690,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 691,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 692,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "log Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 693,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 694,
        "FunctionC++": "WMX3APIFUNC StartLog(unsigned int channel)",
        "FunctionPython": "def StartLog(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Start logging data. "
    },
    {
        "No": 695,
        "FunctionC++": "WMX3APIFUNC StopLog(unsigned int channel)",
        "FunctionPython": "def StopLog(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Stop logging data."
    },
    {
        "No": 696,
        "FunctionC++": "WMX3APIFUNC ResetLog(unsigned int channel)",
        "FunctionPython": "def ResetLog(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Reset the log settings, options, and statuses for the specified log channel."
    },
    {
        "No": 697,
        "FunctionC++": "WMX3APIFUNC SetLogHeader(unsigned int channel, char **ppLine, unsigned int numLines)",
        "FunctionPython": "def SetLogHeader(channel, pLogHeader)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Set the log header string that is copied to the beginning of the log file."
    },
    {
        "No": 698,
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, unsigned int moduleId, void *data, unsigned int dataSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 699,
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, LogInput *input)",
        "FunctionPython": "def SetLog(channel, input)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 700,
        "FunctionC++": "WMX3APIFUNC SetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "FunctionPython": "def SetLogOption(channel, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Set the log options for a log channel."
    },
    {
        "No": 701,
        "FunctionC++": "WMX3APIFUNC GetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "FunctionPython": "def GetLogOption(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the log options for a log channel. "
    },
    {
        "No": 702,
        "FunctionC++": "WMX3APIFUNC SetLogFilePath(unsigned int channel, LogFilePathA *pPath)",
        "FunctionPython": "def SetLogFilePath(channel, pPath)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Set the file path for a log channel."
    },
    {
        "No": 703,
        "FunctionC++": "WMX3APIFUNC GetLogFilePath(unsigned int channel, LogFilePathA *pPath)",
        "FunctionPython": "def GetLogFilePath(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the file path for a log channel."
    },
    {
        "No": 704,
        "FunctionC++": "WMX3APIFUNC SetLogFilePath(unsigned int channel, LogFilePathW *pPath)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Set the file path for a log channel."
    },
    {
        "No": 705,
        "FunctionC++": "WMX3APIFUNC GetLogFilePath(unsigned int channel, LogFilePathW *pPath)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Get the file path for a log channel."
    },
    {
        "No": 706,
        "FunctionC++": "WMX3APIFUNC GetLogStatus(unsigned int channel, LogStatus *pStatus)",
        "FunctionPython": "def GetLogStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the data logging operation."
    },
    {
        "No": 707,
        "FunctionC++": "WMX3APIFUNC GetDetailLogStatus(unsigned int channel, DetailLogStatus *pStatus)",
        "FunctionPython": "def GetDetailLogStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the data logging operation. Compared to GetLogStatus, more detailed statuses can be obtained. "
    },
    {
        "No": 708,
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, char *pPath, unsigned int milliseconds, unsigned int samplePeriodInCycles, AxisSelection *pAxisSelection, LogOptions *pOptions,unsigned int mode, unsigned int burstWriteLines=4, unsigned int scale=9)",
        "FunctionPython": "def SetLog(channel, pPath, milliseconds, samplePeriodInCycles, pAxisSelection, pOptions, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 709,
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, wchar_t *pPath, unsigned int milliseconds, unsigned int samplePeriodInCycles, AxisSelection *pAxisSelection, LogOptions *pOptions,unsigned int mode, unsigned int burstWriteLines=4, unsigned int scale=9)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 710,
        "FunctionC++": "WMX3APIFUNC SetIOLog(unsigned int channel, IOAddress *pInputIOAddress, unsigned int inputSize, IOAddress *pOutputIOAddress, unsigned int outputSize)",
        "FunctionPython": "def SetIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 711,
        "FunctionC++": "WMX3APIFUNC SetIOLogFormat(unsigned int channel, IOLogFormat *pInputIOLogFormat, unsigned int inputIOFormatCount, IOLogFormat *pOutputIOLogFormat, unsigned int outputIOFormatCount)",
        "FunctionPython": "def SetIOLogFormat(channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 712,
        "FunctionC++": "WMX3APIFUNC SetMLog(unsigned int channel, MAddress *pMAddress, unsigned int size)",
        "FunctionPython": "def SetMLog(channel, pMAddress, size)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 713,
        "FunctionC++": "WMX3APIFUNC SetMLogFormat(unsigned int channel, MLogFormat *pMLogFormat, unsigned int mFormatCount)",
        "FunctionPython": "def SetMLogFormat(channel, pMLogFormat, mFormatCount)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 714,
        "FunctionC++": "WMX3APIFUNC OpenMemoryLogBuffer(unsigned int channel)",
        "FunctionPython": "def OpenMemoryLogBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Open the memory log buffer."
    },
    {
        "No": 715,
        "FunctionC++": "WMX3APIFUNC CloseMemoryLogBuffer(unsigned int channel)",
        "FunctionPython": "def CloseMemoryLogBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Close the memory log buffer."
    },
    {
        "No": 716,
        "FunctionC++": "WMX3APIFUNC SetMemoryLog(unsigned int channel, AxisSelection *pAxisSelection, MemoryLogOptions *pOption)",
        "FunctionPython": "def SetMemoryLog(channel, pAxisSelection, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 717,
        "FunctionC++": "WMX3APIFUNC SetMemoryIOLog(unsigned int channel, IOAddress *pInputIOAddress, unsigned int inputSize, IOAddress *pOutputIOAddress, unsigned int outputSize)",
        "FunctionPython": "def SetMemoryIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 718,
        "FunctionC++": "WMX3APIFUNC SetMemoryMLog(unsigned int channel, MAddress *pMAddress, unsigned int size)",
        "FunctionPython": "def SetMemoryMLog(channel, pMAddress, size)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 719,
        "FunctionC++": "WMX3APIFUNC StartMemoryLog(unsigned int channel)",
        "FunctionPython": "def StartMemoryLog(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Start the memory log operation."
    },
    {
        "No": 720,
        "FunctionC++": "WMX3APIFUNC StopMemoryLog(unsigned int channel)",
        "FunctionPython": "def StopMemoryLog(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Stop the memory log operation. "
    },
    {
        "No": 721,
        "FunctionC++": "WMX3APIFUNC GetMemoryLogStatus(unsigned int channel, MemoryLogStatus *pStatus)",
        "FunctionPython": "def GetMemoryLogStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the memory log operation."
    },
    {
        "No": 722,
        "FunctionC++": "WMX3APIFUNC GetMemoryLogData(unsigned int channel, MemoryLogData *pData)",
        "FunctionPython": "def GetMemoryLogData(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 723,
        "FunctionC++": "WMX3APIFUNC SetApiLog(char *pPath, ApiLogOptions *pOptions=NULL, unsigned int buffSize=16777216)",
        "FunctionPython": "def SetApiLog(pPath)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Set the parameters for the API log. "
    },
    {
        "No": 724,
        "FunctionC++": "WMX3APIFUNC SetApiLog(wchar_t *pPath, ApiLogOptions *pOptions=NULL, unsigned int buffSize=16777216)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Set the parameters for the API log"
    },
    {
        "No": 725,
        "FunctionC++": "WMX3APIFUNC StartApiLog()",
        "FunctionPython": "def StartApiLog()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Start logging data to the API log. "
    },
    {
        "No": 726,
        "FunctionC++": "WMX3APIFUNC StopApiLog()",
        "FunctionPython": "def StopApiLog()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Stop logging data to the API log."
    },
    {
        "No": 727,
        "FunctionC++": "WMX3APIFUNC GetApiLogStatus(ApiLogStatus *pStatus)",
        "FunctionPython": "def GetApiLogStatus()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the API log."
    },
    {
        "No": 728,
        "FunctionC++": "WMX3APIFUNC OpenApiLogFile(char *pPath, FILE **ppFile)",
        "FunctionPython": "def OpenApiLogFile(pPath)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Open an API log file to extract information from the contents."
    },
    {
        "No": 729,
        "FunctionC++": "WMX3APIFUNC OpenApiLogFile(wchar_t *pPath, FILE **ppFile)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Open an API log file to extract information from the contents."
    },
    {
        "No": 730,
        "FunctionC++": "WMX3APIFUNC GetApiLogData(FILE *pFile, unsigned char *pDataBuff, unsigned int buffSize)",
        "FunctionPython": "def GetApiLogData(pFile, buffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": null
    },
    {
        "No": 731,
        "FunctionC++": "WMX3APIFUNC GetApiLogData(FILE *pFile, unsigned char *pDataBuff, unsigned int buffSize, ApiLogInfo *pApiLogInfo=NULL)",
        "FunctionPython": "def GetApiLogData_ApiLogInfo(pFile, buffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Extract the information of one API function call from the API log file."
    },
    {
        "No": 732,
        "FunctionC++": "WMX3APIFUNC CloseApiLogFile(FILE *pFile)",
        "FunctionPython": "def CloseApiLogFile(pFile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Close an API log file."
    },
    {
        "No": 733,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "UserMemory Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 734,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "UserMemory Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 735,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "UserMemory Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 736,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "UserMemory Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 737,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 738,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "UserMemory Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 739,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 740,
        "FunctionC++": "WMX3APIFUNC SetMBit(unsigned int addr, unsigned int bit, unsigned char data)",
        "FunctionPython": "def SetMBit(addr, bit, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of a user memory bit."
    },
    {
        "No": 741,
        "FunctionC++": "WMX3APIFUNC SetMByte(unsigned int addr, unsigned char data)",
        "FunctionPython": "def SetMByte(addr, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of a user memory byte."
    },
    {
        "No": 742,
        "FunctionC++": "WMX3APIFUNC SetMBytes(unsigned int addr, unsigned int size, unsigned char *pData)",
        "FunctionPython": "def SetMBytes(addr, size, pData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of multiple user memory bytes. "
    },
    {
        "No": 743,
        "FunctionC++": "WMX3APIFUNC SetMBits(unsigned int *pAddr, unsigned int *pBit, unsigned char *pData, unsigned int count)",
        "FunctionPython": "def SetMBits(pByte, pBit, pData, count)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of multiple user memory bits. "
    },
    {
        "No": 744,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataChar(int addr, char analogData)",
        "FunctionPython": "def SetMAnalogDataChar(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 745,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUChar(int addr, unsigned char analogData)",
        "FunctionPython": "def SetMAnalogDataUChar(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 746,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataShort(int addr, short analogData)",
        "FunctionPython": "def SetMAnalogDataShort(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 747,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUShort(int addr, unsigned short analogData)",
        "FunctionPython": "def SetMAnalogDataUShort(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 748,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataInt(int addr, int analogData)",
        "FunctionPython": "def SetMAnalogDataInt(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 749,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUInt(int addr, unsigned int analogData)",
        "FunctionPython": "def SetMAnalogDataUInt(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 750,
        "FunctionC++": "WMX3APIFUNC GetMBit(unsigned int addr, unsigned int bit, unsigned char *pData)",
        "FunctionPython": "def GetMBit(addr, bit)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of a user memory bit."
    },
    {
        "No": 751,
        "FunctionC++": "WMX3APIFUNC GetMByte(unsigned int addr, unsigned char *pData)",
        "FunctionPython": "def GetMByte(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of a user memory byte."
    },
    {
        "No": 752,
        "FunctionC++": "WMX3APIFUNC GetMBytes(unsigned int addr, unsigned int size, unsigned char *pData)",
        "FunctionPython": "def GetMBytes(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of multiple user memory bytes."
    },
    {
        "No": 753,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataChar(unsigned int addr, char *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataChar(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 754,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUChar(unsigned int addr, unsigned char *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataUChar(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 755,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataShort(unsigned int addr, short *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataShort(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 756,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUShort(unsigned int addr, unsigned short *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataUShort(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 757,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataInt(unsigned int addr, int *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataInt(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 758,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUInt(unsigned int addr, unsigned int *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataUInt(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 759,
        "FunctionC++": "WMX3APIFUNC SetMBitEx(unsigned int addr, unsigned int bit, unsigned char data)",
        "FunctionPython": "def SetMBitEx(addr, bit, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of a user memory bit."
    },
    {
        "No": 760,
        "FunctionC++": "WMX3APIFUNC SetMByteEx(unsigned int addr, unsigned char data)",
        "FunctionPython": "def SetMByteEx(addr, data)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of a user memory byte."
    },
    {
        "No": 761,
        "FunctionC++": "WMX3APIFUNC SetMBytesEx(unsigned int addr, unsigned int size, unsigned char *pData)",
        "FunctionPython": "def SetMBytesEx(addr, size, pData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of multiple user memory bytes. "
    },
    {
        "No": 762,
        "FunctionC++": "WMX3APIFUNC SetMBitsEx(unsigned int *pAddr, unsigned int *pBit, unsigned char *pData, unsigned int count)",
        "FunctionPython": "def SetMBitsEx(pByte, pBit, pData, count)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of multiple user memory bits. "
    },
    {
        "No": 763,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataCharEx(int addr, char analogData)",
        "FunctionPython": "def SetMAnalogDataCharEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 764,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUCharEx(int addr, unsigned char analogData)",
        "FunctionPython": "def SetMAnalogDataUCharEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 765,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataShortEx(int addr, short analogData)",
        "FunctionPython": "def SetMAnalogDataShortEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 766,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUShortEx(int addr, unsigned short analogData)",
        "FunctionPython": "def SetMAnalogDataUShortEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 767,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataIntEx(int addr, int analogData)",
        "FunctionPython": "def SetMAnalogDataIntEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 768,
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUIntEx(int addr, unsigned int analogData)",
        "FunctionPython": "def SetMAnalogDataUIntEx(addr, analogData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "UserMemory Class",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 769,
        "FunctionC++": "WMX3APIFUNC GetMBitEx(unsigned int addr, unsigned int bit, unsigned char *pData)",
        "FunctionPython": "def GetMBitEx(addr, bit)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of a user memory bit."
    },
    {
        "No": 770,
        "FunctionC++": "WMX3APIFUNC GetMByteEx(unsigned int addr, unsigned char *pData)",
        "FunctionPython": "def GetMByteEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of a user memory byte."
    },
    {
        "No": 771,
        "FunctionC++": "WMX3APIFUNC GetMBytesEx(unsigned int addr, unsigned int size, unsigned char *pData)",
        "FunctionPython": "def GetMBytesEx(addr, size)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of multiple user memory bytes. "
    },
    {
        "No": 772,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataCharEx(unsigned int addr, char *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataCharEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 773,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUCharEx(unsigned int addr, unsigned char *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataUCharEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 774,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataShortEx(unsigned int addr, short *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataShortEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 775,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUShortEx(unsigned int addr, unsigned short *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataUShortEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 776,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataIntEx(unsigned int addr, int *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataIntEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 777,
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUIntEx(unsigned int addr, unsigned int *pAnalogData)",
        "FunctionPython": "def GetMAnalogDataUIntEx(addr)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 778,
        "FunctionC++": "void GetUserMemoryAddress(void **pptr)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "UserMemory Class",
        "Instruction": "Get a pointer to the memory address of the user memory address space."
    },
    {
        "No": 779,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 780,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 781,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "WMX3Api Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 782,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 783,
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 784,
        "FunctionC++": "static WMX3APIFUNC GetIMDllVersion(int *pVersion, int *pRevision)",
        "FunctionPython": "def GetIMDllVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the version of the IMDll. "
    },
    {
        "No": 785,
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const char *filePath, const char *format,...)",
        "FunctionPython": "def PrintToFile(filePath, format)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
    },
    {
        "No": 786,
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const wchar_t *filePath, const wchar_t *format,...)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
    },
    {
        "No": 787,
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const char *filePath, const char *format,...)",
        "FunctionPython": "def PrintToFileIfExist(filePath, format)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
    },
    {
        "No": 788,
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const wchar_t *filePath, const wchar_t *format,...)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
    },
    {
        "No": 789,
        "FunctionC++": "static WMX3APIFUNC GetStdOutStr(char *buff, int buffSize, unsigned char *isWideChar, int *strlen)",
        "FunctionPython": "def GetStdOutStr()",
        "ReturnType": "string",
        "ReturnValue": "WMX3 engine message",
        "Class": "WMX3Api Class",
        "Instruction": "Get the character string stored in the WMX3 engine message output buffer. "
    },
    {
        "No": 790,
        "FunctionC++": "static WMX3APIFUNC GetStdOutDataSize()",
        "FunctionPython": "def GetStdOutDataSize()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the size of the string stored in the WMX3 engine message output buffer. "
    },
    {
        "No": 791,
        "FunctionC++": "static WMX3APIFUNC ClearStdOut()",
        "FunctionPython": "def ClearStdOut()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Clear the string stored in the WMX3 engine message output buffer."
    },
    {
        "No": 792,
        "FunctionC++": "static WMX3APIFUNC ReleaseStdOut()",
        "FunctionPython": "def ReleaseStdOut()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Release resources related to the WMX3 engine message output buffer."
    },
    {
        "No": 793,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "WMX3Api Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 794,
        "FunctionC++": "WMX3APIFUNC StartEngine(const char *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": "def StartEngine(path)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Start the WMX3 engine without creating a device. "
    },
    {
        "No": 795,
        "FunctionC++": "WMX3APIFUNC StartEngine(const wchar_t *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Start the WMX3 engine without creating a device. "
    },
    {
        "No": 796,
        "FunctionC++": "WMX3APIFUNC RestartEngine(const char *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": "def RestartEngine(path)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine and then restart the WMX3 engine. "
    },
    {
        "No": 797,
        "FunctionC++": "WMX3APIFUNC RestartEngine(const wchar_t *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine and then restart the WMX3 engine. "
    },
    {
        "No": 798,
        "FunctionC++": "WMX3APIFUNC StopEngine(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def StopEngine()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine."
    },
    {
        "No": 799,
        "FunctionC++": "WMX3APIFUNC CreateDevice(const char *path, DeviceType::T type=DeviceType::T::DeviceTypeNormal, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": "def CreateDevice(path)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Create a device to interface with the WMX3 engine. "
    },
    {
        "No": 800,
        "FunctionC++": "WMX3APIFUNC CreateDevice(const wchar_t *path, DeviceType::T type=DeviceType::T::DeviceTypeNormal, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Create a device to interface with the WMX3 engine. "
    },
    {
        "No": 801,
        "FunctionC++": "WMX3APIFUNC CloseDevice()",
        "FunctionPython": "def CloseDevice()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Close a device."
    },
    {
        "No": 802,
        "FunctionC++": "WMX3APIFUNC GetDeviceID(int *id)",
        "FunctionPython": "def GetDeviceID()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the device ID number of the device."
    },
    {
        "No": 803,
        "FunctionC++": "WMX3APIFUNC AutoQuitWithoutActiveDev(bool quit)",
        "FunctionPython": "def AutoQuitWithoutActiveDev(quit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out."
    },
    {
        "No": 804,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for the device that called this function."
    },
    {
        "No": 805,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(int deviceId, unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(deviceId, watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for a specific device. "
    },
    {
        "No": 806,
        "FunctionC++": "WMX3APIFUNC GetWatchdog(unsigned int *watchdog, unsigned int *watchdogCount=NULL)",
        "FunctionPython": "def GetWatchDog()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the watchdog time out period and the current watchdog count."
    },
    {
        "No": 807,
        "FunctionC++": "WMX3APIFUNC ResetWatchdogTimer()",
        "FunctionPython": "def ResetWatchdogTimer()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Reset the watchdog count of a device."
    },
    {
        "No": 808,
        "FunctionC++": "WMX3APIFUNC SetStatistic(bool enable)",
        "FunctionPython": "def SetStatistic(enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Configure a device to collect API execution statistics data."
    },
    {
        "No": 809,
        "FunctionC++": "WMX3APIFUNC GetStatistic(DeviceStatistics *statistics)",
        "FunctionPython": "def GetStatistic()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Read the currently collected API execution statistics data."
    },
    {
        "No": 810,
        "FunctionC++": "WMX3APIFUNC SetInterruptId(unsigned int interruptId)",
        "FunctionPython": "def SetInterruptId(interrputId)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the interrupt (cyclic handler) associated with the calling device."
    },
    {
        "No": 811,
        "FunctionC++": "WMX3APIFUNC GetInterruptId(unsigned int *interruptId)",
        "FunctionPython": "def GetInterruptId(interrputId)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the interrupt (cyclic handler) associated with the calling device."
    },
    {
        "No": 812,
        "FunctionC++": "WMX3APIFUNC StartCommunication(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def StartCommunication()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Start communication with the servo network."
    },
    {
        "No": 813,
        "FunctionC++": "WMX3APIFUNC StopCommunication(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def StopCommunication()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Stop communication with the servo network."
    },
    {
        "No": 814,
        "FunctionC++": "WMX3APIFUNC GetModulesInfo(ModulesInfoA *modules)",
        "FunctionPython": "def GetModulesInfo()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of the modules that are loaded by the engine."
    },
    {
        "No": 815,
        "FunctionC++": "WMX3APIFUNC GetModulesInfo(ModulesInfoW *modules)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of the modules that are loaded by the engine."
    },
    {
        "No": 816,
        "FunctionC++": "WMX3APIFUNC GetModuleInfo(int moduleId, ModuleInfoA *module)",
        "FunctionPython": "def GetModuleInfo(moduleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of a single module that is loaded by the engine."
    },
    {
        "No": 817,
        "FunctionC++": "WMX3APIFUNC GetModuleInfo(int moduleId, ModuleInfoW *module)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of a single module that is loaded by the engine."
    },
    {
        "No": 818,
        "FunctionC++": "WMX3APIFUNC GetEngineStatus(EngineStatus *status)",
        "FunctionPython": "def GetEngineStatus()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain the status of the engine."
    },
    {
        "No": 819,
        "FunctionC++": "WMX3APIFUNC GetAllDevices(DevicesInfoA *devices)",
        "FunctionPython": "def GetAllDevices()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of all existing devices."
    },
    {
        "No": 820,
        "FunctionC++": "WMX3APIFUNC GetAllDevices(DevicesInfoW *devices)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of all existing devices."
    },
    {
        "No": 821,
        "FunctionC++": "WMX3APIFUNC SetDeviceName(const char *name)",
        "FunctionPython": "def SetDeviceName(name)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the name of this device. "
    },
    {
        "No": 822,
        "FunctionC++": "WMX3APIFUNC SetDeviceName(const wchar_t *name)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Set the name of this device. "
    },
    {
        "No": 823,
        "FunctionC++": "WMX3APIFUNC GetDeviceName(char *nameBuf, unsigned int bufSize)",
        "FunctionPython": "def GetDeviceName()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
    },
    {
        "No": 824,
        "FunctionC++": "WMX3APIFUNC GetDeviceName(wchar_t *nameBuf, unsigned int bufSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
    },
    {
        "No": 825,
        "FunctionC++": "WMX3APIFUNC SetDeviceWaitEvent(int errCode)",
        "FunctionPython": "def SetDeviceWaitEvent(errCode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Reserved."
    },
    {
        "No": 826,
        "FunctionC++": "WMX3APIFUNC ResetDeviceWaitEvent()",
        "FunctionPython": "def ResetDeviceWaitEvent()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Reserved."
    },
    {
        "No": 827,
        "FunctionC++": "WMX3APIFUNC WaitForDeviceWaitEvent(unsigned int waitTime, int *errCode)",
        "FunctionPython": "def WaitForDeviceWaitEvent(waitTime, errCode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Reserved."
    },
    {
        "No": 828,
        "FunctionC++": "WMX3APIFUNC SetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def SetModuleSuspend(suspend)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set whether to suspend loading specific platform modules when starting communication."
    },
    {
        "No": 829,
        "FunctionC++": "WMX3APIFUNC GetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def GetModuleSuspend()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the settings of whether to suspend loading specific platform modules when starting communication."
    },
    {
        "No": 830,
        "FunctionC++": "WMX3APIFUNC AbortModuleSuspend()",
        "FunctionPython": "def AbortModuleSuspend()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Clear all settings of whether to suspend loading specific platform modules when starting communication. "
    },
    {
        "No": 831,
        "FunctionC++": "WMX3APIFUNC SleepAtEngine(unsigned long microSecond)",
        "FunctionPython": "def SleepAtEngine(microSecond)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Pauses execution of the current thread until the specified timeout interval elapses."
    },
    {
        "No": 832,
        "FunctionC++": "WMX3APIFUNC PrintToServerConsole(const char *format,...)",
        "FunctionPython": "def PrintToServerConsole(format)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Print a message to the Console Screen."
    },
    {
        "No": 833,
        "FunctionC++": "WMX3APIFUNC PrintToServerConsole(const wchar_t *format,...)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Print a message to the Console Screen."
    },
    {
        "No": 834,
        "FunctionC++": "WMX3APIFUNC RecordWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def RecordWindowsUpdates()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Record a list of installed Windows Updates to file. "
    },
    {
        "No": 835,
        "FunctionC++": "WMX3APIFUNC RecordWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def RecordWindowsUpdates(waitTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Record a list of installed Windows Updates to file. "
    },
    {
        "No": 836,
        "FunctionC++": "WMX3APIFUNC CompareWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def CompareWindowsUpdates()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Compare the list of currently installed Windows Updates to the list recorded to file. "
    },
    {
        "No": 837,
        "FunctionC++": "WMX3APIFUNC CompareWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def CompareWindowsUpdates(waitTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Compare the list of currently installed Windows Updates to the list recorded to file. "
    },
    {
        "No": 838,
        "FunctionC++": "static ECAPIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "Ecat Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 839,
        "FunctionC++": "static ECAPIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 840,
        "FunctionC++": "static ECAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 841,
        "FunctionC++": "static ECAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 842,
        "FunctionC++": "static ECAPIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 843,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "Ecat Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 844,
        "FunctionC++": "ECAPIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 845,
        "FunctionC++": "ECAPIFUNC ScanNetwork()",
        "FunctionPython": "def ScanNetwork()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Scan the network topology."
    },
    {
        "No": 846,
        "FunctionC++": "ECAPIFUNC ChangeSlaveState(int slaveId, EcStateMachine::T state, int *errorCode)",
        "FunctionPython": "def ChangeSlaveState(slaveId, state)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Change the specified slave state."
    },
    {
        "No": 847,
        "FunctionC++": "ECAPIFUNC StartHotconnect()",
        "FunctionPython": "def StartHotconnect()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Start hot connect. "
    },
    {
        "No": 848,
        "FunctionC++": "ECAPIFUNC ResetRefClockInfo()",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Reset the reference clock information."
    },
    {
        "No": 849,
        "FunctionC++": "ECAPIFUNC ResetTransmitStatisticsInfo()",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Reset the transmission statistics information. "
    },
    {
        "No": 850,
        "FunctionC++": "ECAPIFUNC GetMasterInfo(EcMasterInfo *master)",
        "FunctionPython": "def GetMasterInfo()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Read the current master information from the engine."
    },
    {
        "No": 851,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int slaveId, char *path, unsigned char oneshot=1)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 852,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int slaveId, wchar_t *path, unsigned char oneshot=1)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 853,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int slaveId, int regAddr, int len, unsigned char *data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address. "
    },
    {
        "No": 854,
        "FunctionC++": "ECAPIFUNC RegisterRead(int slaveId, int regAddr, int len, unsigned char *buff)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 855,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int slaveId, int regAddr, int len, unsigned char *data, EcRegisterWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address. "
    },
    {
        "No": 856,
        "FunctionC++": "ECAPIFUNC RegisterRead(int slaveId, int regAddr, int len, EcRegisterReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 857,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int regAddr, int len, unsigned char *data, unsigned short *wkc)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 858,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int regAddr, int len, unsigned char *buff, unsigned short *wkc)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses."
    },
    {
        "No": 859,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int regAddr, int len, unsigned char *data, EcRegisterBroadcastWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 860,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int regAddr, int len, EcRegisterBroadcastReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses."
    },
    {
        "No": 861,
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SdoDownload(slaveId, index, subindex, sdoDataSize, sdoData)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 862,
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SdoUpload(slaveId, index, subindex, sdoBuffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO. "
    },
    {
        "No": 863,
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 864,
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, EcSdoUploadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 865,
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "FunctionPython": "def SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 866,
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "FunctionPython": "def SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 867,
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 868,
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, EcSdoType::T sdoType, EcSdoUploadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 869,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int slaveId, EcObjectDescriptionListType::T type, EcSlaveSdoInfoObjectDescriptionList *list)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave."
    },
    {
        "No": 870,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int slaveId, int index, EcSlaveSdoInfoEntryDescriptionList *list)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index."
    },
    {
        "No": 871,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int slaveId, EcObjectDescriptionListType::T type, EcSdoInfoGetODListCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave. "
    },
    {
        "No": 872,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int slaveId, int index, EcSdoInfoGetEDListCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index."
    },
    {
        "No": 873,
        "FunctionC++": "ECAPIFUNC TxPdoWrite(int slaveId, int index, int subindex, int pdoDataSize, unsigned char *pdoData, unsigned int mask=0)",
        "FunctionPython": "def TxPdoWrite(slaveId, index, subindex, pdoDataSize, pdoData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's Tx PDO. "
    },
    {
        "No": 874,
        "FunctionC++": "ECAPIFUNC ClearTxPdoWrite(int slaveId, int index, int subindex)",
        "FunctionPython": "def ClearTxPdoWrite(slaveId, index, subindex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Clear the data which is being written to Tx PDO."
    },
    {
        "No": 875,
        "FunctionC++": "ECAPIFUNC PdoRead(int slaveId, int index, int subindex, int pdoBuffSize, unsigned char *pdoBuff, unsigned int *actualSize)",
        "FunctionPython": "def PdoRead(slaveId, index, subindex, pdoBuffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's Rx or Tx PDO."
    },
    {
        "No": 876,
        "FunctionC++": "ECAPIFUNC SetOutputBit(int slaveId, int byte, int bit, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output bit for a slave. "
    },
    {
        "No": 877,
        "FunctionC++": "ECAPIFUNC SetOutputByte(int slaveId, int byte, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output byte for a slave."
    },
    {
        "No": 878,
        "FunctionC++": "ECAPIFUNC SetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bytes for a slave."
    },
    {
        "No": 879,
        "FunctionC++": "ECAPIFUNC SetOutputBits(int slaveId, int *pByte, int *pBit, unsigned char *pData, int count)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bits for a slave. "
    },
    {
        "No": 880,
        "FunctionC++": "ECAPIFUNC GetInputBit(int slaveId, int byte, int bit, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input bit from a slave."
    },
    {
        "No": 881,
        "FunctionC++": "ECAPIFUNC GetInputByte(int slaveId, int byte, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input byte from a slave."
    },
    {
        "No": 882,
        "FunctionC++": "ECAPIFUNC GetInputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple input bytes from a slave."
    },
    {
        "No": 883,
        "FunctionC++": "ECAPIFUNC GetOutputBit(int slaveId, int byte, int bit, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output bit from a slave."
    },
    {
        "No": 884,
        "FunctionC++": "ECAPIFUNC GetOutputByte(int slaveId, int byte, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output byte from a slave. "
    },
    {
        "No": 885,
        "FunctionC++": "ECAPIFUNC GetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple output bytes from a slave."
    },
    {
        "No": 886,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 887,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 888,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 889,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave. "
    },
    {
        "No": 890,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave"
    },
    {
        "No": 891,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 892,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 893,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave. "
    },
    {
        "No": 894,
        "FunctionC++": "ECAPIFUNC SIIWrite(int slaveId, int siiAddr, int len, unsigned char *data, bool checkSum=false)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 895,
        "FunctionC++": "ECAPIFUNC SIIRead(int slaveId, int siiAddr, int len, unsigned char *buff)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM."
    },
    {
        "No": 896,
        "FunctionC++": "ECAPIFUNC SIIWrite(int slaveId, int siiAddr, int len, unsigned char *data, EcSIIWriteCallBack callbackFunc, unsigned int waitTime, bool checkSum=false)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 897,
        "FunctionC++": "ECAPIFUNC SIIRead(int slaveId, int siiAddr, int len, EcSIIReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM. "
    },
    {
        "No": 898,
        "FunctionC++": "ECAPIFUNC AoERead(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 899,
        "FunctionC++": "ECAPIFUNC AoEWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave."
    },
    {
        "No": 900,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave."
    },
    {
        "No": 901,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave."
    },
    {
        "No": 902,
        "FunctionC++": "ECAPIFUNC AoERead(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 903,
        "FunctionC++": "ECAPIFUNC AoEWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave. "
    },
    {
        "No": 904,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteControlCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave. "
    },
    {
        "No": 905,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned int writeLength, unsigned char *writeAoEData, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave. "
    },
    {
        "No": 906,
        "FunctionC++": "ECAPIFUNC SoERead(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int buffSize, unsigned char *readSoEBuffer, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 907,
        "FunctionC++": "ECAPIFUNC SoEWrite(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave."
    },
    {
        "No": 908,
        "FunctionC++": "ECAPIFUNC SoERead(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, EcSoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 909,
        "FunctionC++": "ECAPIFUNC SoEWrite(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, EcSoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave. "
    },
    {
        "No": 910,
        "FunctionC++": "ECAPIFUNC VoERead(int slaveId, unsigned int *vendorId, unsigned short *vendorType, unsigned int buffSize, unsigned char *readVoEBuffer, unsigned int *actualSize, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave."
    },
    {
        "No": 911,
        "FunctionC++": "ECAPIFUNC VoEWrite(int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 912,
        "FunctionC++": "ECAPIFUNC VoERead(int slaveId, EcVoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave. "
    },
    {
        "No": 913,
        "FunctionC++": "ECAPIFUNC VoEWrite(int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, EcVoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 914,
        "FunctionC++": "ECAPIFUNC SetAxisMode(int slaveId, int axisIndex, EcOperationMode::T mode)",
        "FunctionPython": "def SetAxisMode(slaveId, axisIndex, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Set the axis operation mode for a specified slave axis."
    },
    {
        "No": 915,
        "FunctionC++": "ECAPIFUNC StartAxisPP(int slaveId, int axisIndex, int targetPos, unsigned int profileVel, unsigned int profileAcc, unsigned int profileDec, char immediately=-1, char relative=-1)",
        "FunctionPython": "def StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Start the PP operation for a specified slave axis. "
    },
    {
        "No": 916,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis."
    },
    {
        "No": 917,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec, unsigned short maxTorque)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis. "
    },
    {
        "No": 918,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 919,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq, unsigned int maxMotorSpeed)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 920,
        "FunctionC++": "ECAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc)",
        "FunctionPython": "def StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 921,
        "FunctionC++": "ECAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc, int homeOffset)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 922,
        "FunctionC++": "ECAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 923,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
    },
    {
        "No": 924,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int slaveId, int chnlId, wchar_t *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 925,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int slaveId, int chnlId, char *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 926,
        "FunctionC++": "ECAPIFUNC CloseSerialChannel(int slaveId, int chnlId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Close an opened serial channel for the specified slave."
    },
    {
        "No": 927,
        "FunctionC++": "ECAPIFUNC ScanNetwork(int masterId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Scan the network topology."
    },
    {
        "No": 928,
        "FunctionC++": "ECAPIFUNC ChangeSlaveState(int masterId, int slaveId, EcStateMachine::T state, int *errorCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Change the specified slave state."
    },
    {
        "No": 929,
        "FunctionC++": "ECAPIFUNC StartHotconnect(int masterId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start hot connect."
    },
    {
        "No": 930,
        "FunctionC++": "ECAPIFUNC ResetRefClockInfo(int masterId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Reset the reference clock information."
    },
    {
        "No": 931,
        "FunctionC++": "ECAPIFUNC ResetTransmitStatisticsInfo(int masterId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Reset the transmission statistics information."
    },
    {
        "No": 932,
        "FunctionC++": "ECAPIFUNC SetUpdatePeriod(unsigned int period)",
        "FunctionPython": "def SetUpdatePeriod(period)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Set the master info update period."
    },
    {
        "No": 933,
        "FunctionC++": "ECAPIFUNC GetMasterInfo(int masterId, EcMasterInfo *master)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read the specified master information from the engine."
    },
    {
        "No": 934,
        "FunctionC++": "ECAPIFUNC GetMasterInfoList(EcMasterInfoList *masters)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read the master list information from the engine."
    },
    {
        "No": 935,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int masterId, int slaveId, char *path, unsigned char oneshot=1)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 936,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int masterId, int slaveId, wchar_t *path, unsigned char oneshot=1)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 937,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int masterId, int slaveId, int regAddr, int len, unsigned char *data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address."
    },
    {
        "No": 938,
        "FunctionC++": "ECAPIFUNC RegisterRead(int masterId, int slaveId, int regAddr, int len, unsigned char *buff)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 939,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int masterId, int slaveId, int regAddr, int len, unsigned char *data, EcRegisterWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address."
    },
    {
        "No": 940,
        "FunctionC++": "ECAPIFUNC RegisterRead(int masterId, int slaveId, int regAddr, int len, EcRegisterReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 941,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int masterId, int regAddr, int len, unsigned char *data, unsigned short *wkc)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 942,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int masterId, int regAddr, int len, unsigned char *buff, unsigned short *wkc)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses. "
    },
    {
        "No": 943,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int masterId, int regAddr, int len, unsigned char *data, EcRegisterBroadcastWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 944,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int masterId, int regAddr, int len, EcRegisterBroadcastReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses."
    },
    {
        "No": 945,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 946,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO. "
    },
    {
        "No": 947,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO. "
    },
    {
        "No": 948,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, EcSdoUploadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 949,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 950,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 951,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 952,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, EcSdoUploadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 953,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int masterId, int slaveId, EcObjectDescriptionListType::T type, EcSlaveSdoInfoObjectDescriptionList *list)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave."
    },
    {
        "No": 954,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int masterId, int slaveId, int index, EcSlaveSdoInfoEntryDescriptionList *list)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index. "
    },
    {
        "No": 955,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int masterId, int slaveId, EcObjectDescriptionListType::T type, EcSdoInfoGetODListCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave."
    },
    {
        "No": 956,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int masterId, int slaveId, int index, EcSdoInfoGetEDListCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index. "
    },
    {
        "No": 957,
        "FunctionC++": "ECAPIFUNC TxPdoWrite(int masterId, int slaveId, int index, int subindex, int pdoDataSize, unsigned char *pdoData, unsigned int mask=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's Tx PDO. "
    },
    {
        "No": 958,
        "FunctionC++": "ECAPIFUNC ClearTxPdoWrite(int masterId, int slaveId, int index, int subindex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Clear the data which is being written to Tx PDO."
    },
    {
        "No": 959,
        "FunctionC++": "ECAPIFUNC PdoRead(int masterId, int slaveId, int index, int subindex, int pdoBuffSize, unsigned char *pdoBuff, unsigned int *actualSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's Rx or Tx PDO."
    },
    {
        "No": 960,
        "FunctionC++": "ECAPIFUNC SetOutputBit(int masterId, int slaveId, int byte, int bit, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output bit for a slave. "
    },
    {
        "No": 961,
        "FunctionC++": "ECAPIFUNC SetOutputByte(int masterId, int slaveId, int byte, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output byte for a slave."
    },
    {
        "No": 962,
        "FunctionC++": "ECAPIFUNC SetOutputBytes(int masterId, int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bytes for a slave."
    },
    {
        "No": 963,
        "FunctionC++": "ECAPIFUNC SetOutputBits(int masterId, int slaveId, int *pByte, int *pBit, unsigned char *pData, int count)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bits for a slave. "
    },
    {
        "No": 964,
        "FunctionC++": "ECAPIFUNC GetInputBit(int masterId, int slaveId, int byte, int bit, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input bit from a slave."
    },
    {
        "No": 965,
        "FunctionC++": "ECAPIFUNC GetInputByte(int masterId, int slaveId, int byte, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input byte from a slave."
    },
    {
        "No": 966,
        "FunctionC++": "ECAPIFUNC GetInputBytes(int masterId, int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple input bytes from a slave."
    },
    {
        "No": 967,
        "FunctionC++": "ECAPIFUNC GetOutputBit(int masterId, int slaveId, int byte, int bit, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output bit from a slave."
    },
    {
        "No": 968,
        "FunctionC++": "ECAPIFUNC GetOutputByte(int masterId, int slaveId, int byte, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output byte from a slave. "
    },
    {
        "No": 969,
        "FunctionC++": "ECAPIFUNC GetOutputBytes(int masterId, int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple output bytes from a slave."
    },
    {
        "No": 970,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 971,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 972,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 973,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 974,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave"
    },
    {
        "No": 975,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 976,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 977,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave. "
    },
    {
        "No": 978,
        "FunctionC++": "ECAPIFUNC SIIWrite(int masterId, int slaveId, int siiAddr, int len, unsigned char *data, bool checkSum=false)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 979,
        "FunctionC++": "ECAPIFUNC SIIRead(int masterId, int slaveId, int siiAddr, int len, unsigned char *buff)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM."
    },
    {
        "No": 980,
        "FunctionC++": "ECAPIFUNC SIIWrite(int masterId, int slaveId, int siiAddr, int len, unsigned char *data, EcSIIWriteCallBack callbackFunc, unsigned int waitTime, bool checkSum=false)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 981,
        "FunctionC++": "ECAPIFUNC SIIRead(int masterId, int slaveId, int siiAddr, int len, EcSIIReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM. "
    },
    {
        "No": 982,
        "FunctionC++": "ECAPIFUNC AoERead(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 983,
        "FunctionC++": "ECAPIFUNC AoEWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave."
    },
    {
        "No": 984,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave."
    },
    {
        "No": 985,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave. "
    },
    {
        "No": 986,
        "FunctionC++": "ECAPIFUNC AoERead(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 987,
        "FunctionC++": "ECAPIFUNC AoEWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave. "
    },
    {
        "No": 988,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteControlCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave. "
    },
    {
        "No": 989,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned int writeLength, unsigned char *writeAoEData, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave. "
    },
    {
        "No": 990,
        "FunctionC++": "ECAPIFUNC SoERead(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int buffSize, unsigned char *readSoEBuffer, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 991,
        "FunctionC++": "ECAPIFUNC SoEWrite(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave."
    },
    {
        "No": 992,
        "FunctionC++": "ECAPIFUNC SoERead(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, EcSoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 993,
        "FunctionC++": "ECAPIFUNC SoEWrite(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, EcSoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave. "
    },
    {
        "No": 994,
        "FunctionC++": "ECAPIFUNC VoERead(int masterId, int slaveId, unsigned int *vendorId, unsigned short *vendorType, unsigned int buffSize, unsigned char *readVoEBuffer, unsigned int *actualSize, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave."
    },
    {
        "No": 995,
        "FunctionC++": "ECAPIFUNC VoEWrite(int masterId, int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, unsigned int waitTime=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 996,
        "FunctionC++": "ECAPIFUNC VoERead(int masterId, int slaveId, EcVoEReadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave. "
    },
    {
        "No": 997,
        "FunctionC++": "ECAPIFUNC VoEWrite(int masterId, int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, EcVoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 998,
        "FunctionC++": "ECAPIFUNC SetAxisMode(int masterId, int slaveId, int axisIndex, EcOperationMode::T mode)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Set the axis operation mode for a specified slave axis."
    },
    {
        "No": 999,
        "FunctionC++": "ECAPIFUNC StartAxisPP(int masterId, int slaveId, int axisIndex, int targetPos, unsigned int profileVel, unsigned int profileAcc, unsigned int profileDec, char immediately=-1, char relative=-1)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the PP operation for a specified slave axis. "
    },
    {
        "No": 1000,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int masterId, int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis. "
    },
    {
        "No": 1001,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int masterId, int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec, unsigned short maxTorque)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis. "
    },
    {
        "No": 1002,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int masterId, int slaveId, int axisIndex, short targetTrq)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 1003,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int masterId, int slaveId, int axisIndex, short targetTrq, unsigned int maxMotorSpeed)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 1004,
        "FunctionC++": "ECAPIFUNC StartAxisHM(int masterId, int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 1005,
        "FunctionC++": "ECAPIFUNC StartAxisHM(int masterId, int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc, int homeOffset)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 1006,
        "FunctionC++": "ECAPIFUNC HaltAxis(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 1007,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
    },
    {
        "No": 1008,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int masterId, int slaveId, int chnlId, wchar_t *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 1009,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int masterId, int slaveId, int chnlId, char *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 1010,
        "FunctionC++": "ECAPIFUNC CloseSerialChannel(int masterId, int slaveId, int chnlId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Close an opened serial channel for the specified slave."
    },
    {
        "No": 1011,
        "FunctionC++": "static CCLINKAPIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "CCLink Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 1012,
        "FunctionC++": "static CCLINKAPIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 1013,
        "FunctionC++": "static CCLINKAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 1014,
        "FunctionC++": "static CCLINKAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 1015,
        "FunctionC++": "static CCLINKAPIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetLibVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 1016,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CCLink Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 1017,
        "FunctionC++": "CCLINKAPIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Get the version of the module rtdll in CCLINK."
    },
    {
        "No": 1018,
        "FunctionC++": "CCLINKAPIFUNC ResetSlaveError(int slaveId)",
        "FunctionPython": "def ResetSlaveError(slaveId)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Reset the salve's error in CCLINK."
    },
    {
        "No": 1019,
        "FunctionC++": "CCLINKAPIFUNC SetUpdatePeriod(unsigned int period)",
        "FunctionPython": "def SetUpdatePeriod(period)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Set the master info update period in CCLINK."
    },
    {
        "No": 1020,
        "FunctionC++": "CCLINKAPIFUNC GetMasterInfo(CCLinkMasterInfo *master)",
        "FunctionPython": "def GetMasterInfo()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Read the current master information from the engine in CCLINK."
    },
    {
        "No": 1021,
        "FunctionC++": "CCLINKAPIFUNC ScanNetwork()",
        "FunctionPython": "def ScanNetwork()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Scan the network topology in CCLINK."
    },
    {
        "No": 1022,
        "FunctionC++": "CCLINKAPIFUNC StartHotconnect()",
        "FunctionPython": "def StartHotconnect()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Start hot connect in CCLINK. "
    },
    {
        "No": 1023,
        "FunctionC++": "CCLINKAPIFUNC ResetSyncStatisticsInfo()",
        "FunctionPython": "def ResetSyncStatisticsInfo()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Reset the synchronization statistics information in CCLINK."
    },
    {
        "No": 1024,
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1025,
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1026,
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, int sdoDataSize, unsigned char *sdoData, CCLinkSdoDownloadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1027,
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoUploadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1028,
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SdoDownload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1029,
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1030,
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, int sdoDataSize, unsigned char *sdoData, CCLinkSdoDownloadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1031,
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, CCLinkSdoUploadCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1032,
        "FunctionC++": "CCLINKAPIFUNC SetOutputBit(int slaveId, int byte, int bit, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Set the value of an output bit for a slave in CCLINK. "
    },
    {
        "No": 1033,
        "FunctionC++": "CCLINKAPIFUNC SetOutputByte(int slaveId, int byte, unsigned char data)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Set the value of an output byte for a slave in CCLINK."
    },
    {
        "No": 1034,
        "FunctionC++": "CCLINKAPIFUNC SetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Set the value of multiple output bytes for a slave in CCLINK."
    },
    {
        "No": 1035,
        "FunctionC++": "CCLINKAPIFUNC SetOutputBits(int slaveId, int *pByte, int *pBit, unsigned char *pData, int count)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Set the value of multiple output bits for a slave in CCLINK. "
    },
    {
        "No": 1036,
        "FunctionC++": "CCLINKAPIFUNC GetInputBit(int slaveId, int byte, int bit, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get the value of an input bit from a slave in CCLINK."
    },
    {
        "No": 1037,
        "FunctionC++": "CCLINKAPIFUNC GetInputByte(int slaveId, int byte, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get the value of an input byte from a slav in CCLINKe."
    },
    {
        "No": 1038,
        "FunctionC++": "CCLINKAPIFUNC GetInputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get the value of multiple input bytes from a slave in CCLINK."
    },
    {
        "No": 1039,
        "FunctionC++": "CCLINKAPIFUNC GetOutputBit(int slaveId, int byte, int bit, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get the value of an output bit from a slave in CCLINK."
    },
    {
        "No": 1040,
        "FunctionC++": "CCLINKAPIFUNC GetOutputByte(int slaveId, int byte, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get the value of an output byte from a slave in CCLINK. "
    },
    {
        "No": 1041,
        "FunctionC++": "CCLINKAPIFUNC GetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get the value of multiple output bytes from a slave in CCLINK."
    },
    {
        "No": 1042,
        "FunctionC++": "CCLINKAPIFUNC SetAxisMode(int slaveId, int axisIndex, CCLinkOperationMode::T mode)",
        "FunctionPython": "def SetAxisMode(slaveId, axisIndex, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Set the axis operation mode for a specified slave axis in CCLINK."
    },
    {
        "No": 1043,
        "FunctionC++": "CCLINKAPIFUNC StartAxisPP(int slaveId, int axisIndex, int targetPos, unsigned int profileVel, unsigned int profileAcc, unsigned int profileDec, char immediately=-1, char relative=-1)",
        "FunctionPython": "def StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Start the PP operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1044,
        "FunctionC++": "CCLINKAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Start the PV operation for a specified slave axis in CCLINK."
    },
    {
        "No": 1045,
        "FunctionC++": "CCLINKAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec, unsigned short maxTorque)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Start the PV operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1046,
        "FunctionC++": "CCLINKAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Start the TQ operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1047,
        "FunctionC++": "CCLINKAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq, unsigned int maxMotorSpeed)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Start the TQ operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1048,
        "FunctionC++": "CCLINKAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc)",
        "FunctionPython": "def StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Start the HM operation for a specified slave axis in CCLINK."
    },
    {
        "No": 1049,
        "FunctionC++": "CCLINKAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc, int homeOffset)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Start the HM operation for a specified slave axis in CCLINK."
    },
    {
        "No": 1050,
        "FunctionC++": "CCLINKAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Halt the specified slave axis in CCLINK."
    },
    {
        "No": 1051,
        "FunctionC++": "CCLINKAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Release the halt state for a specified slave axis in CCLINK."
    },
    {
        "No": 1052,
        "FunctionC++": "CCLINKAPIFUNC SlmpSendBySlaveId(int slaveId, unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, int buffSize, unsigned char *buff, unsigned int *actualSize, unsigned short *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SlmpSendBySlaveId(slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": null
    },
    {
        "No": 1053,
        "FunctionC++": "CCLINKAPIFUNC SlmpSendBySlaveId(int slaveId, unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, CCLinkSlmpSendBySlaveIdCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": null
    },
    {
        "No": 1054,
        "FunctionC++": "CCLINKAPIFUNC SlmpSendByMacIpAddr(unsigned char macAddr[6], unsigned char ipAddr[4], unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, int buffSize, unsigned char *buff, unsigned int *actualSize, unsigned short *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SlmpSendByMacIpAddr(macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": null
    },
    {
        "No": 1055,
        "FunctionC++": "CCLINKAPIFUNC SlmpSendByMacIpAddr(unsigned char macAddr[6], unsigned char ipAddr[4], unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, CCLinkSlmpSendByMacIpAddrCallBack callbackFunc, unsigned int waitTime)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": null
    }
]